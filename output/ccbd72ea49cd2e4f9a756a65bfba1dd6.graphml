<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d7" for="node" attr.name="path" attr.type="string"/>
<key id="d6" for="node" attr.name="name" attr.type="string"/>
<key id="d5" for="node" attr.name="end_code_line" attr.type="long"/>
<key id="d4" for="node" attr.name="start_code_line" attr.type="long"/>
<key id="d3" for="node" attr.name="desc" attr.type="string"/>
<key id="d2" for="node" attr.name="source_name" attr.type="string"/>
<key id="d1" for="node" attr.name="target_name" attr.type="string"/>
<key id="d0" for="node" attr.name="source_code" attr.type="string"/>
<graph edgedefault="directed"><node id="pom.xml|ruoyi-admin">
  <data key="d0">83:             &lt;plugin&gt;   
84:                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;   
85:                 &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;   
86:                 &lt;version&gt;3.1.0&lt;/version&gt;   
87:                 &lt;configuration&gt;
88:                     &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;
89:                     &lt;warName&gt;${project.artifactId}&lt;/warName&gt;
90:                 &lt;/configuration&gt;   
91:            &lt;/plugin&gt;   </data>
  <data key="d1">maven-war-plugin</data>
  <data key="d2">ruoyi-admin</data>
  <data key="d3">ruoyi-admin项目使用maven-war-plugin进行构建</data>
  <data key="d4">83</data>
  <data key="d5">91</data>
  <data key="d6">pom.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\pom.xml</data>
</node>
<node id="pom.xml|ruoyi">
  <data key="d0"> 6:         &lt;artifactId&gt;ruoyi&lt;/artifactId&gt;
 7:         &lt;groupId&gt;com.ruoyi&lt;/groupId&gt;
 8:         &lt;version&gt;3.8.9&lt;/version&gt;
 9:     &lt;/parent&gt;</data>
  <data key="d2">ruoyi-admin</data>
  <data key="d1">ruoyi</data>
  <data key="d3">ruoyi-admin项目依赖于父级项目ruoyi</data>
  <data key="d4">6</data>
  <data key="d5">9</data>
  <data key="d6">pom.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\pom.xml</data>
</node>
<node id="pom.xml|spring-boot-devtools">
  <data key="d0">21:         &lt;dependency&gt;
22:             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
23:             &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;
24:             &lt;optional&gt;true&lt;/optional&gt; &lt;!-- 表示依赖不会传递 --&gt;
25:         &lt;/dependency&gt;</data>
  <data key="d2">ruoyi-admin</data>
  <data key="d1">spring-boot-devtools</data>
  <data key="d3">ruoyi-admin项目依赖于spring-boot-devtools库</data>
  <data key="d4">21</data>
  <data key="d5">25</data>
  <data key="d6">pom.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\pom.xml</data>
</node>
<node id="pom.xml|springfox-boot-starter">
  <data key="d0">28:         &lt;dependency&gt;
29:             &lt;groupId&gt;io.springfox&lt;/groupId&gt;
30:             &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt;
31:         &lt;/dependency&gt;</data>
  <data key="d2">ruoyi-admin</data>
  <data key="d1">springfox-boot-starter</data>
  <data key="d3">ruoyi-admin项目依赖于swagger3库springfox-boot-starter</data>
  <data key="d4">28</data>
  <data key="d5">31</data>
  <data key="d6">pom.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\pom.xml</data>
</node>
<node id="pom.xml|swagger-models">
  <data key="d0">34:         &lt;dependency&gt;
35:             &lt;groupId&gt;io.swagger&lt;/groupId&gt;
36:             &lt;artifactId&gt;swagger-models&lt;/artifactId&gt;
37:             &lt;version&gt;1.6.2&lt;/version&gt;
38:         &lt;/dependency&gt;</data>
  <data key="d2">ruoyi-admin</data>
  <data key="d1">swagger-models</data>
  <data key="d3">ruoyi-admin项目依赖于swagger-models库，版本为1.6.2</data>
  <data key="d4">34</data>
  <data key="d5">38</data>
  <data key="d6">pom.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\pom.xml</data>
</node>
<node id="pom.xml|mysql-connector-java">
  <data key="d0">41:         &lt;dependency&gt;
42:             &lt;groupId&gt;mysql&lt;/groupId&gt;
43:             &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
44:         &lt;/dependency&gt;</data>
  <data key="d2">ruoyi-admin</data>
  <data key="d1">mysql-connector-java</data>
  <data key="d3">ruoyi-admin项目依赖于Mysql驱动包</data>
  <data key="d4">41</data>
  <data key="d5">44</data>
  <data key="d6">pom.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\pom.xml</data>
</node>
<node id="pom.xml|ruoyi-framework">
  <data key="d0">48:             &lt;groupId&gt;com.ruoyi&lt;/groupId&gt;
49:             &lt;artifactId&gt;ruoyi-framework&lt;/artifactId&gt;
50:         &lt;/dependency&gt;</data>
  <data key="d2">ruoyi-admin</data>
  <data key="d1">ruoyi-framework</data>
  <data key="d3">ruoyi-admin项目依赖于核心模块ruoyi-framework</data>
  <data key="d4">48</data>
  <data key="d5">50</data>
  <data key="d6">pom.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\pom.xml</data>
</node>
<node id="pom.xml|ruoyi-quartz">
  <data key="d0">54:             &lt;groupId&gt;com.ruoyi&lt;/groupId&gt;
55:             &lt;artifactId&gt;ruoyi-quartz&lt;/artifactId&gt;
56:         &lt;/dependency&gt;</data>
  <data key="d2">ruoyi-admin</data>
  <data key="d1">ruoyi-quartz</data>
  <data key="d3">ruoyi-admin项目依赖于定时任务模块ruoyi-quartz</data>
  <data key="d4">54</data>
  <data key="d5">56</data>
  <data key="d6">pom.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\pom.xml</data>
</node>
<node id="pom.xml|ruoyi-generator">
  <data key="d0">60:             &lt;groupId&gt;com.ruoyi&lt;/groupId&gt;
61:             &lt;artifactId&gt;ruoyi-generator&lt;/artifactId&gt;
62:         &lt;/dependency&gt;</data>
  <data key="d2">ruoyi-admin</data>
  <data key="d1">ruoyi-generator</data>
  <data key="d3">ruoyi-admin项目依赖于代码生成模块ruoyi-generator</data>
  <data key="d4">60</data>
  <data key="d5">62</data>
  <data key="d6">pom.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\pom.xml</data>
</node>
<node id="pom.xml|spring-boot-maven-plugin">
  <data key="d0">68:             &lt;plugin&gt;
69:                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
70:                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
71:                 &lt;version&gt;2.5.15&lt;/version&gt;
72:                 &lt;configuration&gt;
73:                     &lt;fork&gt;true&lt;/fork&gt; &lt;!-- 如果没有该配置，devtools不会生效 --&gt;
74:                 &lt;/configuration&gt;
75:                 &lt;executions&gt;
76:                     &lt;execution&gt;
77:                         &lt;goals&gt;
78:                             &lt;goal&gt;repackage&lt;/goal&gt;
79:                         &lt;/goals&gt;
80:                     &lt;/execution&gt;
81:                 &lt;/executions&gt;
82:             &lt;/plugin&gt;</data>
  <data key="d2">ruoyi-admin</data>
  <data key="d1">spring-boot-maven-plugin</data>
  <data key="d3">ruoyi-admin项目使用spring-boot-maven-plugin进行构建</data>
  <data key="d4">68</data>
  <data key="d5">82</data>
  <data key="d6">pom.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\pom.xml</data>
</node>
<node id="pom.xml|maven-war-plugin">
  <data key="d0">83:             &lt;plugin&gt;   
84:                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;   
85:                 &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;   
86:                 &lt;version&gt;3.1.0&lt;/version&gt;   
87:                 &lt;configuration&gt;
88:                     &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;
89:                     &lt;warName&gt;${project.artifactId}&lt;/warName&gt;
90:                 &lt;/configuration&gt;   
91:            &lt;/plugin&gt;   </data>
  <data key="d2">ruoyi-admin</data>
  <data key="d1">maven-war-plugin</data>
  <data key="d3">ruoyi-admin项目使用maven-war-plugin进行构建</data>
  <data key="d4">83</data>
  <data key="d5">91</data>
  <data key="d6">pom.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\pom.xml</data>
</node>
<node id="logback.xml|property">
  <data key="d0"> 6: 	&lt;property name="log.pattern" value="%d{HH:mm:ss.SSS} [%thread] %-5level %logger{20} - [%method,%line] - %msg%n" /&gt;</data>
  <data key="d1">log.pattern</data>
  <data key="d2">property</data>
  <data key="d3">定义日志输出格式</data>
  <data key="d4">6</data>
  <data key="d5">6</data>
  <data key="d6">logback.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\resources\logback.xml</data>
</node>
<node id="logback.xml|log.path">
  <data key="d0"> 4: 	&lt;property name="log.path" value="/home/ruoyi/logs" /&gt;</data>
  <data key="d2">property</data>
  <data key="d1">log.path</data>
  <data key="d3">定义日志存放路径</data>
  <data key="d4">4</data>
  <data key="d5">4</data>
  <data key="d6">logback.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\resources\logback.xml</data>
</node>
<node id="logback.xml|log.pattern">
  <data key="d0"> 6: 	&lt;property name="log.pattern" value="%d{HH:mm:ss.SSS} [%thread] %-5level %logger{20} - [%method,%line] - %msg%n" /&gt;</data>
  <data key="d2">property</data>
  <data key="d1">log.pattern</data>
  <data key="d3">定义日志输出格式</data>
  <data key="d4">6</data>
  <data key="d5">6</data>
  <data key="d6">logback.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\resources\logback.xml</data>
</node>
<node id="logback.xml|appender">
  <data key="d0">61:     &lt;appender name="sys-user" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;
62: 		&lt;file&gt;${log.path}/sys-user.log&lt;/file&gt;
63:         &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;
64:             &lt;!-- 按天回滚 daily --&gt;
65:             &lt;fileNamePattern&gt;${log.path}/sys-user.%d{yyyy-MM-dd}.log&lt;/fileNamePattern&gt;
66:             &lt;!-- 日志最大的历史 60天 --&gt;
67:             &lt;maxHistory&gt;60&lt;/maxHistory&gt;
68:         &lt;/rollingPolicy&gt;
69:         &lt;encoder&gt;
70:             &lt;pattern&gt;${log.pattern}&lt;/pattern&gt;
71:         &lt;/encoder&gt;
72:     &lt;/appender&gt;</data>
  <data key="d1">sys-user</data>
  <data key="d2">appender</data>
  <data key="d3">定义用户访问日志输出</data>
  <data key="d4">61</data>
  <data key="d5">72</data>
  <data key="d6">logback.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\resources\logback.xml</data>
</node>
<node id="logback.xml|console">
  <data key="d0"> 9: 	&lt;appender name="console" class="ch.qos.logback.core.ConsoleAppender"&gt;
10: 		&lt;encoder&gt;
11: 			&lt;pattern&gt;${log.pattern}&lt;/pattern&gt;
12: 		&lt;/encoder&gt;
13: 	&lt;/appender&gt;</data>
  <data key="d2">appender</data>
  <data key="d1">console</data>
  <data key="d3">定义控制台输出</data>
  <data key="d4">9</data>
  <data key="d5">13</data>
  <data key="d6">logback.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\resources\logback.xml</data>
</node>
<node id="logback.xml|file_info">
  <data key="d0">16: 	&lt;appender name="file_info" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;
17: 	    &lt;file&gt;${log.path}/sys-info.log&lt;/file&gt;
18:         &lt;!-- 循环政策：基于时间创建日志文件 --&gt;
19: 		&lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;
20:             &lt;!-- 日志文件名格式 --&gt;
21: 			&lt;fileNamePattern&gt;${log.path}/sys-info.%d{yyyy-MM-dd}.log&lt;/fileNamePattern&gt;
22: 			&lt;!-- 日志最大的历史 60天 --&gt;
23: 			&lt;maxHistory&gt;60&lt;/maxHistory&gt;
24: 		&lt;/rollingPolicy&gt;
25: 		&lt;encoder&gt;
26: 			&lt;pattern&gt;${log.pattern}&lt;/pattern&gt;
27: 		&lt;/encoder&gt;
28: 		&lt;filter class="ch.qos.logback.classic.filter.LevelFilter"&gt;
29:             &lt;!-- 过滤的级别 --&gt;
30:             &lt;level&gt;INFO&lt;/level&gt;
31:             &lt;!-- 匹配时的操作：接收（记录） --&gt;
32:             &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;
33:             &lt;!-- 不匹配时的操作：拒绝（不记录） --&gt;
34:             &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;
35:         &lt;/filter&gt;
36: 	&lt;/appender&gt;</data>
  <data key="d2">appender</data>
  <data key="d1">file_info</data>
  <data key="d3">定义系统日志输出</data>
  <data key="d4">16</data>
  <data key="d5">36</data>
  <data key="d6">logback.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\resources\logback.xml</data>
</node>
<node id="logback.xml|file_error">
  <data key="d0">38: 	&lt;appender name="file_error" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;
39: 	    &lt;file&gt;${log.path}/sys-error.log&lt;/file&gt;
40:         &lt;!-- 循环政策：基于时间创建日志文件 --&gt;
41:         &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;
42:             &lt;!-- 日志文件名格式 --&gt;
43:             &lt;fileNamePattern&gt;${log.path}/sys-error.%d{yyyy-MM-dd}.log&lt;/fileNamePattern&gt;
44: 			&lt;!-- 日志最大的历史 60天 --&gt;
45: 			&lt;maxHistory&gt;60&lt;/maxHistory&gt;
46:         &lt;/rollingPolicy&gt;
47:         &lt;encoder&gt;
48:             &lt;pattern&gt;${log.pattern}&lt;/pattern&gt;
49:         &lt;/encoder&gt;
50:         &lt;filter class="ch.qos.logback.classic.filter.LevelFilter"&gt;
51:             &lt;!-- 过滤的级别 --&gt;
52:             &lt;level&gt;ERROR&lt;/level&gt;
53: 			&lt;!-- 匹配时的操作：接收（记录） --&gt;
54:             &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;
55: 			&lt;!-- 不匹配时的操作：拒绝（不记录） --&gt;
56:             &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;
57:         &lt;/filter&gt;
58:     &lt;/appender&gt;</data>
  <data key="d2">appender</data>
  <data key="d1">file_error</data>
  <data key="d3">定义系统错误日志输出</data>
  <data key="d4">38</data>
  <data key="d5">58</data>
  <data key="d6">logback.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\resources\logback.xml</data>
</node>
<node id="logback.xml|sys-user">
  <data key="d0">61:     &lt;appender name="sys-user" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;
62: 		&lt;file&gt;${log.path}/sys-user.log&lt;/file&gt;
63:         &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;
64:             &lt;!-- 按天回滚 daily --&gt;
65:             &lt;fileNamePattern&gt;${log.path}/sys-user.%d{yyyy-MM-dd}.log&lt;/fileNamePattern&gt;
66:             &lt;!-- 日志最大的历史 60天 --&gt;
67:             &lt;maxHistory&gt;60&lt;/maxHistory&gt;
68:         &lt;/rollingPolicy&gt;
69:         &lt;encoder&gt;
70:             &lt;pattern&gt;${log.pattern}&lt;/pattern&gt;
71:         &lt;/encoder&gt;
72:     &lt;/appender&gt;</data>
  <data key="d2">appender</data>
  <data key="d1">sys-user</data>
  <data key="d3">定义用户访问日志输出</data>
  <data key="d4">61</data>
  <data key="d5">72</data>
  <data key="d6">logback.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\resources\logback.xml</data>
</node>
<node id="logback.xml|logger">
  <data key="d0">90:     &lt;logger name="sys-user" level="info"&gt;
91:         &lt;appender-ref ref="sys-user"/&gt;
92:     &lt;/logger&gt;</data>
  <data key="d1">sys-user</data>
  <data key="d2">logger</data>
  <data key="d3">控制sys-user模块的日志级别为info并引用用户访问日志输出</data>
  <data key="d4">90</data>
  <data key="d5">92</data>
  <data key="d6">logback.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\resources\logback.xml</data>
</node>
<node id="logback.xml|com.ruoyi">
  <data key="d0">75: 	&lt;logger name="com.ruoyi" level="info" /&gt;</data>
  <data key="d2">logger</data>
  <data key="d1">com.ruoyi</data>
  <data key="d3">控制com.ruoyi模块的日志级别为info</data>
  <data key="d4">75</data>
  <data key="d5">75</data>
  <data key="d6">logback.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\resources\logback.xml</data>
</node>
<node id="logback.xml|org.springframework">
  <data key="d0">77: 	&lt;logger name="org.springframework" level="warn" /&gt;</data>
  <data key="d2">logger</data>
  <data key="d1">org.springframework</data>
  <data key="d3">控制org.springframework模块的日志级别为warn</data>
  <data key="d4">77</data>
  <data key="d5">77</data>
  <data key="d6">logback.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\resources\logback.xml</data>
</node>
<node id="logback.xml|root">
  <data key="d0">84:     &lt;root level="info"&gt;
85:         &lt;appender-ref ref="file_info" /&gt;
86:         &lt;appender-ref ref="file_error" /&gt;</data>
  <data key="d1">file_info</data>
  <data key="d2">root</data>
  <data key="d3">设置根日志级别为info并引用系统日志输出</data>
  <data key="d4">84</data>
  <data key="d5">86</data>
  <data key="d6">logback.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\resources\logback.xml</data>
</node>
<node id="mybatis-config.xml|configuration">
  <data key="d0"> 5: &lt;configuration&gt;
 6:     &lt;!-- 全局参数 --&gt;
 7:     &lt;settings&gt;
 8:         &lt;!-- 使全局的映射器启用或禁用缓存 --&gt;
 9:         &lt;setting name="cacheEnabled"             value="true"   /&gt;
10:         &lt;!-- 允许JDBC 支持自动生成主键 --&gt;
11:         &lt;setting name="useGeneratedKeys"         value="true"   /&gt;
12:         &lt;!-- 配置默认的执行器.SIMPLE就是普通执行器;REUSE执行器会重用预处理语句(prepared statements);BATCH执行器将重用语句并执行批量更新 --&gt;
13:         &lt;setting name="defaultExecutorType"      value="SIMPLE" /&gt;
14: 		&lt;!-- 指定 MyBatis 所用日志的具体实现 --&gt;
15:         &lt;setting name="logImpl"                  value="SLF4J"  /&gt;
16:         &lt;!-- 使用驼峰命名法转换字段 --&gt;
17: 		&lt;!-- &lt;setting name="mapUnderscoreToCamelCase" value="true"/&gt; --&gt;
18: 	&lt;/settings&gt;</data>
  <data key="d1">settings</data>
  <data key="d2">configuration</data>
  <data key="d3">configuration提供全局参数设置</data>
  <data key="d4">5</data>
  <data key="d5">18</data>
  <data key="d6">mybatis-config.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\resources\mybatis\mybatis-config.xml</data>
</node>
<node id="mybatis-config.xml|settings">
  <data key="d0"> 7:     &lt;settings&gt;
 8:         &lt;!-- 使全局的映射器启用或禁用缓存 --&gt;
 9:         &lt;setting name="cacheEnabled"             value="true"   /&gt;
10:         &lt;!-- 允许JDBC 支持自动生成主键 --&gt;
11:         &lt;setting name="useGeneratedKeys"         value="true"   /&gt;
12:         &lt;!-- 配置默认的执行器.SIMPLE就是普通执行器;REUSE执行器会重用预处理语句(prepared statements);BATCH执行器将重用语句并执行批量更新 --&gt;
13:         &lt;setting name="defaultExecutorType"      value="SIMPLE" /&gt;
14: 		&lt;!-- 指定 MyBatis 所用日志的具体实现 --&gt;
15:         &lt;setting name="logImpl"                  value="SLF4J"  /&gt;</data>
  <data key="d2">settings</data>
  <data key="d1">setting</data>
  <data key="d3">settings中包含多个参数设置</data>
  <data key="d4">7</data>
  <data key="d5">15</data>
  <data key="d6">mybatis-config.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\resources\mybatis\mybatis-config.xml</data>
</node>
<node id="mybatis-config.xml|setting">
  <data key="d0"> 7:     &lt;settings&gt;
 8:         &lt;!-- 使全局的映射器启用或禁用缓存 --&gt;
 9:         &lt;setting name="cacheEnabled"             value="true"   /&gt;
10:         &lt;!-- 允许JDBC 支持自动生成主键 --&gt;
11:         &lt;setting name="useGeneratedKeys"         value="true"   /&gt;
12:         &lt;!-- 配置默认的执行器.SIMPLE就是普通执行器;REUSE执行器会重用预处理语句(prepared statements);BATCH执行器将重用语句并执行批量更新 --&gt;
13:         &lt;setting name="defaultExecutorType"      value="SIMPLE" /&gt;
14: 		&lt;!-- 指定 MyBatis 所用日志的具体实现 --&gt;
15:         &lt;setting name="logImpl"                  value="SLF4J"  /&gt;</data>
  <data key="d2">settings</data>
  <data key="d1">setting</data>
  <data key="d3">settings中包含多个参数设置</data>
  <data key="d4">7</data>
  <data key="d5">15</data>
  <data key="d6">mybatis-config.xml</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\resources\mybatis\mybatis-config.xml</data>
</node>
<node id="RuoYiApplication.java|RuoYiApplication">
  <data key="d0">15:     public static void main(String[] args)
16:     {
17:         // System.setProperty("spring.devtools.restart.enabled", "false");
18:         SpringApplication.run(RuoYiApplication.class, args);</data>
  <data key="d1">System</data>
  <data key="d2">RuoYiApplication</data>
  <data key="d3">RuoYiApplication类的main方法调用System.out.println输出启动成功信息</data>
  <data key="d4">15</data>
  <data key="d5">18</data>
  <data key="d6">RuoYiApplication.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\RuoYiApplication.java</data>
</node>
<node id="RuoYiApplication.java|SpringApplication">
  <data key="d0">15:     public static void main(String[] args)
16:     {
17:         // System.setProperty("spring.devtools.restart.enabled", "false");
18:         SpringApplication.run(RuoYiApplication.class, args);</data>
  <data key="d2">RuoYiApplication</data>
  <data key="d1">SpringApplication</data>
  <data key="d3">RuoYiApplication类的main方法调用SpringApplication.run方法以启动应用程序</data>
  <data key="d4">15</data>
  <data key="d5">18</data>
  <data key="d6">RuoYiApplication.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\RuoYiApplication.java</data>
</node>
<node id="RuoYiApplication.java|System">
  <data key="d0">15:     public static void main(String[] args)
16:     {
17:         // System.setProperty("spring.devtools.restart.enabled", "false");
18:         SpringApplication.run(RuoYiApplication.class, args);</data>
  <data key="d2">RuoYiApplication</data>
  <data key="d1">System</data>
  <data key="d3">RuoYiApplication类的main方法调用System.out.println输出启动成功信息</data>
  <data key="d4">15</data>
  <data key="d5">18</data>
  <data key="d6">RuoYiApplication.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\RuoYiApplication.java</data>
</node>
<node id="RuoYiServletInitializer.java|RuoYiServletInitializer">
  <data key="d0">11: public class RuoYiServletInitializer extends SpringBootServletInitializer
12: {
13:     @Override
14:     protected SpringApplicationBuilder configure(SpringApplicationBuilder application)
15:     {
16:         return application.sources(RuoYiApplication.class);
17:     }
18: }</data>
  <data key="d1">SpringBootServletInitializer</data>
  <data key="d2">RuoYiServletInitializer</data>
  <data key="d3">RuoYiServletInitializer类继承SpringBootServletInitializer类并重写configure方法</data>
  <data key="d4">11</data>
  <data key="d5">18</data>
  <data key="d6">RuoYiServletInitializer.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\RuoYiServletInitializer.java</data>
</node>
<node id="RuoYiServletInitializer.java|SpringBootServletInitializer">
  <data key="d0">11: public class RuoYiServletInitializer extends SpringBootServletInitializer
12: {
13:     @Override
14:     protected SpringApplicationBuilder configure(SpringApplicationBuilder application)
15:     {
16:         return application.sources(RuoYiApplication.class);
17:     }
18: }</data>
  <data key="d2">RuoYiServletInitializer</data>
  <data key="d1">SpringBootServletInitializer</data>
  <data key="d3">RuoYiServletInitializer类继承SpringBootServletInitializer类并重写configure方法</data>
  <data key="d4">11</data>
  <data key="d5">18</data>
  <data key="d6">RuoYiServletInitializer.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\RuoYiServletInitializer.java</data>
</node>
<node id="RuoYiServletInitializer.java|configure">
  <data key="d0">14:     protected SpringApplicationBuilder configure(SpringApplicationBuilder application)
15:     {
16:         return application.sources(RuoYiApplication.class);</data>
  <data key="d1">SpringApplicationBuilder</data>
  <data key="d2">configure</data>
  <data key="d3">configure方法接受SpringApplicationBuilder参数并调用sources方法</data>
  <data key="d4">14</data>
  <data key="d5">16</data>
  <data key="d6">RuoYiServletInitializer.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\RuoYiServletInitializer.java</data>
</node>
<node id="RuoYiServletInitializer.java|SpringApplicationBuilder">
  <data key="d0">14:     protected SpringApplicationBuilder configure(SpringApplicationBuilder application)
15:     {
16:         return application.sources(RuoYiApplication.class);</data>
  <data key="d2">configure</data>
  <data key="d1">SpringApplicationBuilder</data>
  <data key="d3">configure方法接受SpringApplicationBuilder参数并调用sources方法</data>
  <data key="d4">14</data>
  <data key="d5">16</data>
  <data key="d6">RuoYiServletInitializer.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\RuoYiServletInitializer.java</data>
</node>
<node id="CaptchaController.java|CaptchaController">
  <data key="d0">46:     public AjaxResult getCode(HttpServletResponse response) throws IOException
47:     {
48:         AjaxResult ajax = AjaxResult.success();
49:         boolean captchaEnabled = configService.selectCaptchaEnabled();
50:         ajax.put("captchaEnabled", captchaEnabled);
51:         if (!captchaEnabled)
52:         {
53:             return ajax;
54:         }
55: 
56:         // 保存验证码信息
57:         String uuid = IdUtils.simpleUUID();
58:         String verifyKey = CacheConstants.CAPTCHA_CODE_KEY + uuid;
59: 
60:         String capStr = null, code = null;
61:         BufferedImage image = null;
62: 
63:         // 生成验证码
64:         String captchaType = RuoYiConfig.getCaptchaType();
65:         if ("math".equals(captchaType))
66:         {
67:             String capText = captchaProducerMath.createText();
68:             capStr = capText.substring(0, capText.lastIndexOf("@"));
69:             code = capText.substring(capText.lastIndexOf("@") + 1);
70:             image = captchaProducerMath.createImage(capStr);
71:         }
72:         else if ("char".equals(captchaType))
73:         {
74:             capStr = code = captchaProducer.createText();
75:             image = captchaProducer.createImage(capStr);
76:         }
77: 
78:         redisCache.setCacheObject(verifyKey, code, Constants.CAPTCHA_EXPIRATION, TimeUnit.MINUTES);
79:         // 转换流信息写出
80:         FastByteArrayOutputStream os = new FastByteArrayOutputStream();
81:         try
82:         {
83:             ImageIO.write(image, "jpg", os);
84:         }
85:         catch (IOException e)
86:         {
87:             return AjaxResult.error(e.getMessage());
88:         }
89: 
90:         ajax.put("uuid", uuid);
91:         ajax.put("img", Base64.encode(os.toByteArray()));
92:         return ajax;</data>
  <data key="d1">Base64</data>
  <data key="d2">CaptchaController</data>
  <data key="d3">CaptchaController类中的getCode方法将生成的验证码图像转换为Base64字符串</data>
  <data key="d4">46</data>
  <data key="d5">92</data>
  <data key="d6">CaptchaController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\common\CaptchaController.java</data>
</node>
<node id="CaptchaController.java|ISysConfigService">
  <data key="d0">46:     public AjaxResult getCode(HttpServletResponse response) throws IOException
47:     {
48:         AjaxResult ajax = AjaxResult.success();
49:         boolean captchaEnabled = configService.selectCaptchaEnabled();
50:         ajax.put("captchaEnabled", captchaEnabled);
51:         if (!captchaEnabled)
52:         {
53:             return ajax;
54:         }
55: 
56:         // 保存验证码信息
57:         String uuid = IdUtils.simpleUUID();
58:         String verifyKey = CacheConstants.CAPTCHA_CODE_KEY + uuid;
59: 
60:         String capStr = null, code = null;
61:         BufferedImage image = null;
62: 
63:         // 生成验证码
64:         String captchaType = RuoYiConfig.getCaptchaType();
65:         if ("math".equals(captchaType))
66:         {
67:             String capText = captchaProducerMath.createText();
68:             capStr = capText.substring(0, capText.lastIndexOf("@"));
69:             code = capText.substring(capText.lastIndexOf("@") + 1);
70:             image = captchaProducerMath.createImage(capStr);
71:         }
72:         else if ("char".equals(captchaType))
73:         {
74:             capStr = code = captchaProducer.createText();
75:             image = captchaProducer.createImage(capStr);
76:         }
77: 
78:         redisCache.setCacheObject(verifyKey, code, Constants.CAPTCHA_EXPIRATION, TimeUnit.MINUTES);
79:         // 转换流信息写出
80:         FastByteArrayOutputStream os = new FastByteArrayOutputStream();
81:         try
82:         {
83:             ImageIO.write(image, "jpg", os);
84:         }
85:         catch (IOException e)
86:         {
87:             return AjaxResult.error(e.getMessage());
88:         }
89: 
90:         ajax.put("uuid", uuid);
91:         ajax.put("img", Base64.encode(os.toByteArray()));
92:         return ajax;</data>
  <data key="d2">CaptchaController</data>
  <data key="d1">ISysConfigService</data>
  <data key="d3">CaptchaController类中的getCode方法调用configService的selectCaptchaEnabled方法来获取验证码是否启用</data>
  <data key="d4">46</data>
  <data key="d5">92</data>
  <data key="d6">CaptchaController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\common\CaptchaController.java</data>
</node>
<node id="CaptchaController.java|Producer">
  <data key="d0">46:     public AjaxResult getCode(HttpServletResponse response) throws IOException
47:     {
48:         AjaxResult ajax = AjaxResult.success();
49:         boolean captchaEnabled = configService.selectCaptchaEnabled();
50:         ajax.put("captchaEnabled", captchaEnabled);
51:         if (!captchaEnabled)
52:         {
53:             return ajax;
54:         }
55: 
56:         // 保存验证码信息
57:         String uuid = IdUtils.simpleUUID();
58:         String verifyKey = CacheConstants.CAPTCHA_CODE_KEY + uuid;
59: 
60:         String capStr = null, code = null;
61:         BufferedImage image = null;
62: 
63:         // 生成验证码
64:         String captchaType = RuoYiConfig.getCaptchaType();
65:         if ("math".equals(captchaType))
66:         {
67:             String capText = captchaProducerMath.createText();
68:             capStr = capText.substring(0, capText.lastIndexOf("@"));
69:             code = capText.substring(capText.lastIndexOf("@") + 1);
70:             image = captchaProducerMath.createImage(capStr);
71:         }
72:         else if ("char".equals(captchaType))
73:         {
74:             capStr = code = captchaProducer.createText();
75:             image = captchaProducer.createImage(capStr);
76:         }
77: 
78:         redisCache.setCacheObject(verifyKey, code, Constants.CAPTCHA_EXPIRATION, TimeUnit.MINUTES);
79:         // 转换流信息写出
80:         FastByteArrayOutputStream os = new FastByteArrayOutputStream();
81:         try
82:         {
83:             ImageIO.write(image, "jpg", os);
84:         }
85:         catch (IOException e)
86:         {
87:             return AjaxResult.error(e.getMessage());
88:         }
89: 
90:         ajax.put("uuid", uuid);
91:         ajax.put("img", Base64.encode(os.toByteArray()));
92:         return ajax;</data>
  <data key="d2">CaptchaController</data>
  <data key="d1">Producer</data>
  <data key="d3">CaptchaController类中的getCode方法根据验证码类型调用captchaProducer或captchaProducerMath生成验证码文本和图像</data>
  <data key="d4">46</data>
  <data key="d5">92</data>
  <data key="d6">CaptchaController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\common\CaptchaController.java</data>
</node>
<node id="CaptchaController.java|RedisCache">
  <data key="d0">46:     public AjaxResult getCode(HttpServletResponse response) throws IOException
47:     {
48:         AjaxResult ajax = AjaxResult.success();
49:         boolean captchaEnabled = configService.selectCaptchaEnabled();
50:         ajax.put("captchaEnabled", captchaEnabled);
51:         if (!captchaEnabled)
52:         {
53:             return ajax;
54:         }
55: 
56:         // 保存验证码信息
57:         String uuid = IdUtils.simpleUUID();
58:         String verifyKey = CacheConstants.CAPTCHA_CODE_KEY + uuid;
59: 
60:         String capStr = null, code = null;
61:         BufferedImage image = null;
62: 
63:         // 生成验证码
64:         String captchaType = RuoYiConfig.getCaptchaType();
65:         if ("math".equals(captchaType))
66:         {
67:             String capText = captchaProducerMath.createText();
68:             capStr = capText.substring(0, capText.lastIndexOf("@"));
69:             code = capText.substring(capText.lastIndexOf("@") + 1);
70:             image = captchaProducerMath.createImage(capStr);
71:         }
72:         else if ("char".equals(captchaType))
73:         {
74:             capStr = code = captchaProducer.createText();
75:             image = captchaProducer.createImage(capStr);
76:         }
77: 
78:         redisCache.setCacheObject(verifyKey, code, Constants.CAPTCHA_EXPIRATION, TimeUnit.MINUTES);
79:         // 转换流信息写出
80:         FastByteArrayOutputStream os = new FastByteArrayOutputStream();
81:         try
82:         {
83:             ImageIO.write(image, "jpg", os);
84:         }
85:         catch (IOException e)
86:         {
87:             return AjaxResult.error(e.getMessage());
88:         }
89: 
90:         ajax.put("uuid", uuid);
91:         ajax.put("img", Base64.encode(os.toByteArray()));
92:         return ajax;</data>
  <data key="d2">CaptchaController</data>
  <data key="d1">RedisCache</data>
  <data key="d3">CaptchaController类中的getCode方法将验证码存储到redis中，通过调用redisCache的setCacheObject方法</data>
  <data key="d4">46</data>
  <data key="d5">92</data>
  <data key="d6">CaptchaController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\common\CaptchaController.java</data>
</node>
<node id="CaptchaController.java|Base64">
  <data key="d0">46:     public AjaxResult getCode(HttpServletResponse response) throws IOException
47:     {
48:         AjaxResult ajax = AjaxResult.success();
49:         boolean captchaEnabled = configService.selectCaptchaEnabled();
50:         ajax.put("captchaEnabled", captchaEnabled);
51:         if (!captchaEnabled)
52:         {
53:             return ajax;
54:         }
55: 
56:         // 保存验证码信息
57:         String uuid = IdUtils.simpleUUID();
58:         String verifyKey = CacheConstants.CAPTCHA_CODE_KEY + uuid;
59: 
60:         String capStr = null, code = null;
61:         BufferedImage image = null;
62: 
63:         // 生成验证码
64:         String captchaType = RuoYiConfig.getCaptchaType();
65:         if ("math".equals(captchaType))
66:         {
67:             String capText = captchaProducerMath.createText();
68:             capStr = capText.substring(0, capText.lastIndexOf("@"));
69:             code = capText.substring(capText.lastIndexOf("@") + 1);
70:             image = captchaProducerMath.createImage(capStr);
71:         }
72:         else if ("char".equals(captchaType))
73:         {
74:             capStr = code = captchaProducer.createText();
75:             image = captchaProducer.createImage(capStr);
76:         }
77: 
78:         redisCache.setCacheObject(verifyKey, code, Constants.CAPTCHA_EXPIRATION, TimeUnit.MINUTES);
79:         // 转换流信息写出
80:         FastByteArrayOutputStream os = new FastByteArrayOutputStream();
81:         try
82:         {
83:             ImageIO.write(image, "jpg", os);
84:         }
85:         catch (IOException e)
86:         {
87:             return AjaxResult.error(e.getMessage());
88:         }
89: 
90:         ajax.put("uuid", uuid);
91:         ajax.put("img", Base64.encode(os.toByteArray()));
92:         return ajax;</data>
  <data key="d2">CaptchaController</data>
  <data key="d1">Base64</data>
  <data key="d3">CaptchaController类中的getCode方法将生成的验证码图像转换为Base64字符串</data>
  <data key="d4">46</data>
  <data key="d5">92</data>
  <data key="d6">CaptchaController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\common\CaptchaController.java</data>
</node>
<node id="CommonController.java|CommonController">
  <data key="d0">155:             FileUtils.setAttachmentResponseHeader(response, downloadName);
156:             FileUtils.writeBytes(downloadPath, response.getOutputStream());</data>
  <data key="d1">FileUtils</data>
  <data key="d2">CommonController</data>
  <data key="d3">CommonController中的resourceDownload方法设置响应头以便下载资源</data>
  <data key="d4">155</data>
  <data key="d5">156</data>
  <data key="d6">CommonController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\common\CommonController.java</data>
</node>
<node id="CommonController.java|FileUtils">
  <data key="d0"> 46:     @GetMapping("/download")
 47:     public void fileDownload(String fileName, Boolean delete, HttpServletResponse response, HttpServletRequest request)
 48:     {
 49:         try
 50:         {
 51:             if (!FileUtils.checkAllowDownload(fileName))
 52:             {
 53:                 throw new Exception(StringUtils.format("文件名称({})非法，不允许下载。 ", fileName));
 54:             }
 55:             String realFileName = System.currentTimeMillis() + fileName.substring(fileName.indexOf("_") + 1);
 56:             String filePath = RuoYiConfig.getDownloadPath() + fileName;
 57: 
 58:             response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);
 59:             FileUtils.setAttachmentResponseHeader(response, realFileName);
 60:             FileUtils.writeBytes(filePath, response.getOutputStream());
 61:             if (delete)
 62:             {
 63:                 FileUtils.deleteFile(filePath);
 64:             }
 65:         }
 66:         catch (Exception e)
 67:         {
 68:             log.error("下载文件失败", e);
 69:         }
 70:     }</data>
  <data key="d2">CommonController</data>
  <data key="d1">FileUtils</data>
  <data key="d3">CommonController中的fileDownload方法验证文件下载合法性并下载指定文件</data>
  <data key="d4">46</data>
  <data key="d5">70</data>
  <data key="d6">CommonController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\common\CommonController.java</data>
</node>
<node id="CommonController.java|StringUtils">
  <data key="d0"> 51:             if (!FileUtils.checkAllowDownload(fileName))
 52:             {
 53:                 throw new Exception(StringUtils.format("文件名称({})非法，不允许下载。 ", fileName));
 54:             }</data>
  <data key="d2">CommonController</data>
  <data key="d1">StringUtils</data>
  <data key="d3">CommonController中的fileDownload方法处理非法文件名称的异常抛出</data>
  <data key="d4">51</data>
  <data key="d5">54</data>
  <data key="d6">CommonController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\common\CommonController.java</data>
</node>
<node id="CommonController.java|RuoYiConfig">
  <data key="d0"> 56:             String filePath = RuoYiConfig.getDownloadPath() + fileName;</data>
  <data key="d2">CommonController</data>
  <data key="d1">RuoYiConfig</data>
  <data key="d3">CommonController中的fileDownload方法获取下载路径</data>
  <data key="d4">56</data>
  <data key="d5">56</data>
  <data key="d6">CommonController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\common\CommonController.java</data>
</node>
<node id="CommonController.java|FileUploadUtils">
  <data key="d0"> 83:             String fileName = FileUploadUtils.upload(filePath, file);</data>
  <data key="d2">CommonController</data>
  <data key="d1">FileUploadUtils</data>
  <data key="d3">CommonController中的uploadFile方法处理文件上传并返回新文件名称</data>
  <data key="d4">83</data>
  <data key="d5">83</data>
  <data key="d6">CommonController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\common\CommonController.java</data>
</node>
<node id="CommonController.java|serverConfig">
  <data key="d0"> 84:             String url = serverConfig.getUrl() + fileName;</data>
  <data key="d2">CommonController</data>
  <data key="d1">serverConfig</data>
  <data key="d3">CommonController中的uploadFile方法组合存储文件url</data>
  <data key="d4">84</data>
  <data key="d5">84</data>
  <data key="d6">CommonController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\common\CommonController.java</data>
</node>
<node id="CommonController.java|AjaxResult">
  <data key="d0"> 85:             AjaxResult ajax = AjaxResult.success();
 86:             ajax.put("url", url);
 87:             ajax.put("fileName", fileName);
 88:             ajax.put("newFileName", FileUtils.getName(fileName));
 89:             ajax.put("originalFilename", file.getOriginalFilename());
 90:             return ajax;</data>
  <data key="d2">CommonController</data>
  <data key="d1">AjaxResult</data>
  <data key="d3">CommonController中的uploadFile方法创建成功响应</data>
  <data key="d4">85</data>
  <data key="d5">90</data>
  <data key="d6">CommonController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\common\CommonController.java</data>
</node>
<node id="CacheController.java|CacheController">
  <data key="d0">113:     @PreAuthorize("@ss.hasPermi('monitor:cache:list')")
114:     @DeleteMapping("/clearCacheAll")
115:     public AjaxResult clearCacheAll()
116:     {
117:         Collection&lt;String&gt; cacheKeys = redisTemplate.keys("*");
118:         redisTemplate.delete(cacheKeys);
119:         return AjaxResult.success();
120:     }</data>
  <data key="d1">AjaxResult</data>
  <data key="d2">CacheController</data>
  <data key="d3">CacheController类的clearCacheAll方法清除所有缓存</data>
  <data key="d4">113</data>
  <data key="d5">120</data>
  <data key="d6">CacheController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\CacheController.java</data>
</node>
<node id="CacheController.java|AjaxResult">
  <data key="d0"> 48:     @PreAuthorize("@ss.hasPermi('monitor:cache:list')")
 49:     @GetMapping()
 50:     public AjaxResult getInfo() throws Exception
 51:     {
 52:         Properties info = (Properties) redisTemplate.execute((RedisCallback&lt;Object&gt;) connection -&gt; connection.info());
 53:         Properties commandStats = (Properties) redisTemplate.execute((RedisCallback&lt;Object&gt;) connection -&gt; connection.info("commandstats"));
 54:         Object dbSize = redisTemplate.execute((RedisCallback&lt;Object&gt;) connection -&gt; connection.dbSize());
 55: 
 56:         Map&lt;String, Object&gt; result = new HashMap&lt;&gt;(3);
 57:         result.put("info", info);
 58:         result.put("dbSize", dbSize);
 59: 
 60:         List&lt;Map&lt;String, String&gt;&gt; pieList = new ArrayList&lt;&gt;();
 61:         commandStats.stringPropertyNames().forEach(key -&gt; {
 62:             Map&lt;String, String&gt; data = new HashMap&lt;&gt;(2);
 63:             String property = commandStats.getProperty(key);
 64:             data.put("name", StringUtils.removeStart(key, "cmdstat_"));
 65:             data.put("value", StringUtils.substringBetween(property, "calls=", ",usec"));
 66:             pieList.add(data);
 67:         });
 68:         result.put("commandStats", pieList);
 69:         return AjaxResult.success(result);
 70:     }</data>
  <data key="d2">CacheController</data>
  <data key="d1">AjaxResult</data>
  <data key="d3">CacheController类的getInfo方法返回缓存相关信息</data>
  <data key="d4">48</data>
  <data key="d5">70</data>
  <data key="d6">CacheController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\CacheController.java</data>
</node>
<node id="CacheController.java|redisTemplate">
  <data key="d0">118:         redisTemplate.delete(cacheKeys);</data>
  <data key="d1">delete</data>
  <data key="d2">redisTemplate</data>
  <data key="d3">redisTemplate调用delete方法删除匹配的所有缓存键</data>
  <data key="d4">118</data>
  <data key="d5">118</data>
  <data key="d6">CacheController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\CacheController.java</data>
</node>
<node id="CacheController.java|connection.info">
  <data key="d0"> 52:         Properties info = (Properties) redisTemplate.execute((RedisCallback&lt;Object&gt;) connection -&gt; connection.info());</data>
  <data key="d2">redisTemplate</data>
  <data key="d1">connection.info</data>
  <data key="d3">redisTemplate调用connection的info方法获取Redis信息</data>
  <data key="d4">52</data>
  <data key="d5">52</data>
  <data key="d6">CacheController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\CacheController.java</data>
</node>
<node id="CacheController.java|connection.dbSize">
  <data key="d0"> 54:         Object dbSize = redisTemplate.execute((RedisCallback&lt;Object&gt;) connection -&gt; connection.dbSize());</data>
  <data key="d2">redisTemplate</data>
  <data key="d1">connection.dbSize</data>
  <data key="d3">redisTemplate调用connection的dbSize方法获取数据库大小</data>
  <data key="d4">54</data>
  <data key="d5">54</data>
  <data key="d6">CacheController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\CacheController.java</data>
</node>
<node id="CacheController.java|commandStats">
  <data key="d0"> 61:         commandStats.stringPropertyNames().forEach(key -&gt; {</data>
  <data key="d1">stringPropertyNames</data>
  <data key="d2">commandStats</data>
  <data key="d3">commandStats调用stringPropertyNames获取所有属性名称</data>
  <data key="d4">61</data>
  <data key="d5">61</data>
  <data key="d6">CacheController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\CacheController.java</data>
</node>
<node id="CacheController.java|stringPropertyNames">
  <data key="d0"> 61:         commandStats.stringPropertyNames().forEach(key -&gt; {</data>
  <data key="d2">commandStats</data>
  <data key="d1">stringPropertyNames</data>
  <data key="d3">commandStats调用stringPropertyNames获取所有属性名称</data>
  <data key="d4">61</data>
  <data key="d5">61</data>
  <data key="d6">CacheController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\CacheController.java</data>
</node>
<node id="CacheController.java|StringUtils">
  <data key="d0"> 65:             data.put("value", StringUtils.substringBetween(property, "calls=", ",usec"));</data>
  <data key="d1">substringBetween</data>
  <data key="d2">StringUtils</data>
  <data key="d3">StringUtils的substringBetween方法获取字符串之间的子串</data>
  <data key="d4">65</data>
  <data key="d5">65</data>
  <data key="d6">CacheController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\CacheController.java</data>
</node>
<node id="CacheController.java|removeStart">
  <data key="d0"> 64:             data.put("name", StringUtils.removeStart(key, "cmdstat_"));</data>
  <data key="d2">StringUtils</data>
  <data key="d1">removeStart</data>
  <data key="d3">StringUtils的removeStart方法去除字符串开头的特定前缀</data>
  <data key="d4">64</data>
  <data key="d5">64</data>
  <data key="d6">CacheController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\CacheController.java</data>
</node>
<node id="CacheController.java|substringBetween">
  <data key="d0"> 65:             data.put("value", StringUtils.substringBetween(property, "calls=", ",usec"));</data>
  <data key="d2">StringUtils</data>
  <data key="d1">substringBetween</data>
  <data key="d3">StringUtils的substringBetween方法获取字符串之间的子串</data>
  <data key="d4">65</data>
  <data key="d5">65</data>
  <data key="d6">CacheController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\CacheController.java</data>
</node>
<node id="CacheController.java|keys">
  <data key="d0"> 83:         Set&lt;String&gt; cacheKeys = redisTemplate.keys(cacheName + "*");</data>
  <data key="d2">redisTemplate</data>
  <data key="d1">keys</data>
  <data key="d3">redisTemplate调用keys方法获取匹配特定模式的缓存键</data>
  <data key="d4">83</data>
  <data key="d5">83</data>
  <data key="d6">CacheController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\CacheController.java</data>
</node>
<node id="CacheController.java|opsForValue">
  <data key="d0"> 91:         String cacheValue = redisTemplate.opsForValue().get(cacheKey);</data>
  <data key="d2">redisTemplate</data>
  <data key="d1">opsForValue</data>
  <data key="d3">redisTemplate调用opsForValue方法获取Value相关操作接口</data>
  <data key="d4">91</data>
  <data key="d5">91</data>
  <data key="d6">CacheController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\CacheController.java</data>
</node>
<node id="CacheController.java|delete">
  <data key="d0">101:         redisTemplate.delete(cacheKeys);</data>
  <data key="d2">redisTemplate</data>
  <data key="d1">delete</data>
  <data key="d3">redisTemplate调用delete方法删除指定的缓存键</data>
  <data key="d4">101</data>
  <data key="d5">101</data>
  <data key="d6">CacheController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\CacheController.java</data>
</node>
<node id="ServerController.java|ServerController">
  <data key="d0">23:         Server server = new Server();
24:         server.copyTo();</data>
  <data key="d1">Server</data>
  <data key="d2">ServerController</data>
  <data key="d3">ServerController类的getInfo方法创建Server对象并调用其copyTo方法</data>
  <data key="d4">23</data>
  <data key="d5">24</data>
  <data key="d6">ServerController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\ServerController.java</data>
</node>
<node id="ServerController.java|AjaxResult">
  <data key="d0">21:     public AjaxResult getInfo() throws Exception
22:     {
23:         Server server = new Server();
24:         server.copyTo();
25:         return AjaxResult.success(server);</data>
  <data key="d2">ServerController</data>
  <data key="d1">AjaxResult</data>
  <data key="d3">ServerController类的getInfo方法调用AjaxResult的success方法返回服务器信息</data>
  <data key="d4">21</data>
  <data key="d5">25</data>
  <data key="d6">ServerController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\ServerController.java</data>
</node>
<node id="ServerController.java|Server">
  <data key="d0">23:         Server server = new Server();
24:         server.copyTo();</data>
  <data key="d2">ServerController</data>
  <data key="d1">Server</data>
  <data key="d3">ServerController类的getInfo方法创建Server对象并调用其copyTo方法</data>
  <data key="d4">23</data>
  <data key="d5">24</data>
  <data key="d6">ServerController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\ServerController.java</data>
</node>
<node id="SysLogininforController.java|SysLogininforController">
  <data key="d0">79:         passwordService.clearLoginRecordCache(userName);
80:         return success();</data>
  <data key="d1">SysPasswordService</data>
  <data key="d2">SysLogininforController</data>
  <data key="d3">SysLogininforController类调用passwordService清除指定用户的登录记录缓存</data>
  <data key="d4">79</data>
  <data key="d5">80</data>
  <data key="d6">SysLogininforController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\SysLogininforController.java</data>
</node>
<node id="SysLogininforController.java|ISysLogininforService">
  <data key="d0">40:     public TableDataInfo list(SysLogininfor logininfor)
41:     {
42:         startPage();
43:         List&lt;SysLogininfor&gt; list = logininforService.selectLogininforList(logininfor);
44:         return getDataTable(list);</data>
  <data key="d2">SysLogininforController</data>
  <data key="d1">ISysLogininforService</data>
  <data key="d3">SysLogininforController类通过logininforService调用selectLogininforList方法获取登录信息列表</data>
  <data key="d4">40</data>
  <data key="d5">44</data>
  <data key="d6">SysLogininforController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\SysLogininforController.java</data>
</node>
<node id="SysLogininforController.java|ExcelUtil">
  <data key="d0">50:     public void export(HttpServletResponse response, SysLogininfor logininfor)
51:     {
52:         List&lt;SysLogininfor&gt; list = logininforService.selectLogininforList(logininfor);
53:         ExcelUtil&lt;SysLogininfor&gt; util = new ExcelUtil&lt;SysLogininfor&gt;(SysLogininfor.class);
54:         util.exportExcel(response, list, "登录日志");</data>
  <data key="d2">SysLogininforController</data>
  <data key="d1">ExcelUtil</data>
  <data key="d3">SysLogininforController类通过ExcelUtil导出登录日志到Excel文件</data>
  <data key="d4">50</data>
  <data key="d5">54</data>
  <data key="d6">SysLogininforController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\SysLogininforController.java</data>
</node>
<node id="SysLogininforController.java|SysPasswordService">
  <data key="d0">79:         passwordService.clearLoginRecordCache(userName);
80:         return success();</data>
  <data key="d2">SysLogininforController</data>
  <data key="d1">SysPasswordService</data>
  <data key="d3">SysLogininforController类调用passwordService清除指定用户的登录记录缓存</data>
  <data key="d4">79</data>
  <data key="d5">80</data>
  <data key="d6">SysLogininforController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\SysLogininforController.java</data>
</node>
<node id="SysOperlogController.java|SysOperlogController">
  <data key="d0">64:     public AjaxResult clean()
65:     {
66:         operLogService.cleanOperLog();</data>
  <data key="d1">operLogService</data>
  <data key="d2">SysOperlogController</data>
  <data key="d3">SysOperlogController类调用operLogService的cleanOperLog方法以清除操作日志</data>
  <data key="d4">64</data>
  <data key="d5">66</data>
  <data key="d6">SysOperlogController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\SysOperlogController.java</data>
</node>
<node id="SysOperlogController.java|operLogService">
  <data key="d0">36:     public TableDataInfo list(SysOperLog operLog)
37:     {
38:         startPage();
39:         List&lt;SysOperLog&gt; list = operLogService.selectOperLogList(operLog);
40:         return getDataTable(list);</data>
  <data key="d2">SysOperlogController</data>
  <data key="d1">operLogService</data>
  <data key="d3">SysOperlogController类调用operLogService的selectOperLogList方法以获取操作日志列表</data>
  <data key="d4">36</data>
  <data key="d5">40</data>
  <data key="d6">SysOperlogController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\SysOperlogController.java</data>
</node>
<node id="SysOperlogController.java|ExcelUtil">
  <data key="d0">46:     public void export(HttpServletResponse response, SysOperLog operLog)
47:     {
48:         List&lt;SysOperLog&gt; list = operLogService.selectOperLogList(operLog);
49:         ExcelUtil&lt;SysOperLog&gt; util = new ExcelUtil&lt;SysOperLog&gt;(SysOperLog.class);
50:         util.exportExcel(response, list, "操作日志");</data>
  <data key="d2">SysOperlogController</data>
  <data key="d1">ExcelUtil</data>
  <data key="d3">SysOperlogController类调用ExcelUtil的exportExcel方法将操作日志导出为Excel文件</data>
  <data key="d4">46</data>
  <data key="d5">50</data>
  <data key="d6">SysOperlogController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\SysOperlogController.java</data>
</node>
<node id="SysUserOnlineController.java|SysUserOnlineController">
  <data key="d0">80:         redisCache.deleteObject(CacheConstants.LOGIN_TOKEN_KEY + tokenId);</data>
  <data key="d1">redisCache</data>
  <data key="d2">SysUserOnlineController</data>
  <data key="d3">SysUserOnlineController类使用redisCache提供的deleteObject方法删除指定TOKEN的对象</data>
  <data key="d4">80</data>
  <data key="d5">80</data>
  <data key="d6">SysUserOnlineController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\SysUserOnlineController.java</data>
</node>
<node id="SysUserOnlineController.java|redisCache">
  <data key="d0">45:         Collection&lt;String&gt; keys = redisCache.keys(CacheConstants.LOGIN_TOKEN_KEY + "*");</data>
  <data key="d2">SysUserOnlineController</data>
  <data key="d1">redisCache</data>
  <data key="d3">SysUserOnlineController类使用redisCache提供的keys方法获取匹配的登录TOKEN键</data>
  <data key="d4">45</data>
  <data key="d5">45</data>
  <data key="d6">SysUserOnlineController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\SysUserOnlineController.java</data>
</node>
<node id="SysUserOnlineController.java|userOnlineService">
  <data key="d0">52:                 userOnlineList.add(userOnlineService.selectOnlineByInfo(ipaddr, userName, user));</data>
  <data key="d2">SysUserOnlineController</data>
  <data key="d1">userOnlineService</data>
  <data key="d3">SysUserOnlineController类调用userOnlineService的selectOnlineByInfo方法获取在线用户信息</data>
  <data key="d4">52</data>
  <data key="d5">52</data>
  <data key="d6">SysUserOnlineController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\SysUserOnlineController.java</data>
</node>
<node id="SysUserOnlineController.java|getDataTable">
  <data key="d0">69:         return getDataTable(userOnlineList);</data>
  <data key="d2">SysUserOnlineController</data>
  <data key="d1">getDataTable</data>
  <data key="d3">SysUserOnlineController类调用getDataTable方法返回用户列表的表格数据</data>
  <data key="d4">69</data>
  <data key="d5">69</data>
  <data key="d6">SysUserOnlineController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\monitor\SysUserOnlineController.java</data>
</node>
<node id="SysConfigController.java|SysConfigController">
  <data key="d0">130:         configService.resetConfigCache();</data>
  <data key="d1">configService</data>
  <data key="d2">SysConfigController</data>
  <data key="d3">SysConfigController类刷新参数缓存通过configService调用resetConfigCache函数</data>
  <data key="d4">130</data>
  <data key="d5">130</data>
  <data key="d6">SysConfigController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysConfigController.java</data>
</node>
<node id="SysConfigController.java|configService">
  <data key="d0"> 42:     public TableDataInfo list(SysConfig config)
 43:     {
 44:         startPage();
 45:         List&lt;SysConfig&gt; list = configService.selectConfigList(config);
 46:         return getDataTable(list);</data>
  <data key="d2">SysConfigController</data>
  <data key="d1">configService</data>
  <data key="d3">SysConfigController类获取参数配置列表通过configService调用selectConfigList函数</data>
  <data key="d4">42</data>
  <data key="d5">46</data>
  <data key="d6">SysConfigController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysConfigController.java</data>
</node>
<node id="SysConfigController.java|ExcelUtil">
  <data key="d0"> 51:     @PostMapping("/export")
 52:     public void export(HttpServletResponse response, SysConfig config)
 53:     {
 54:         List&lt;SysConfig&gt; list = configService.selectConfigList(config);
 55:         ExcelUtil&lt;SysConfig&gt; util = new ExcelUtil&lt;SysConfig&gt;(SysConfig.class);
 56:         util.exportExcel(response, list, "参数数据");</data>
  <data key="d2">SysConfigController</data>
  <data key="d1">ExcelUtil</data>
  <data key="d3">SysConfigController类导出参数数据通过ExcelUtil调用exportExcel函数</data>
  <data key="d4">51</data>
  <data key="d5">56</data>
  <data key="d6">SysConfigController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysConfigController.java</data>
</node>
<node id="SysDeptController.java|SysDeptController">
  <data key="d0">119:     public AjaxResult remove(@PathVariable Long deptId)
120:     {
121:         if (deptService.hasChildByDeptId(deptId))
122:         {
123:             return warn("存在下级部门,不允许删除");
124:         }
125:         if (deptService.checkDeptExistUser(deptId))
126:         {
127:             return warn("部门存在用户,不允许删除");
128:         }
129:         deptService.checkDeptDataScope(deptId);
130:         return toAjax(deptService.deleteDeptById(deptId));</data>
  <data key="d1">ISysDeptService</data>
  <data key="d2">SysDeptController</data>
  <data key="d3">SysDeptController类通过deptService调用ISysDeptService接口实现删除部门功能</data>
  <data key="d4">119</data>
  <data key="d5">130</data>
  <data key="d6">SysDeptController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysDeptController.java</data>
</node>
<node id="SysDeptController.java|ISysDeptService">
  <data key="d0"> 42:     public AjaxResult list(SysDept dept)
 43:     {
 44:         List&lt;SysDept&gt; depts = deptService.selectDeptList(dept);
 45:         return success(depts);</data>
  <data key="d2">SysDeptController</data>
  <data key="d1">ISysDeptService</data>
  <data key="d3">SysDeptController类通过deptService调用ISysDeptService接口实现获取部门列表功能</data>
  <data key="d4">42</data>
  <data key="d5">45</data>
  <data key="d6">SysDeptController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysDeptController.java</data>
</node>
<node id="SysDictDataController.java|SysDictDataController">
  <data key="d0">117:     {
118:         dictDataService.deleteDictDataByIds(dictCodes);
119:         return success();</data>
  <data key="d1">dictDataService</data>
  <data key="d2">SysDictDataController</data>
  <data key="d3">SysDictDataController类调用dictDataService删除字典数据</data>
  <data key="d4">117</data>
  <data key="d5">119</data>
  <data key="d6">SysDictDataController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysDictDataController.java</data>
</node>
<node id="SysDictDataController.java|dictDataService">
  <data key="d0"> 45:     public TableDataInfo list(SysDictData dictData)
 46:     {
 47:         startPage();
 48:         List&lt;SysDictData&gt; list = dictDataService.selectDictDataList(dictData);
 49:         return getDataTable(list);</data>
  <data key="d2">SysDictDataController</data>
  <data key="d1">dictDataService</data>
  <data key="d3">SysDictDataController类调用dictDataService服务获取字典数据列表</data>
  <data key="d4">45</data>
  <data key="d5">49</data>
  <data key="d6">SysDictDataController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysDictDataController.java</data>
</node>
<node id="SysDictDataController.java|ExcelUtil">
  <data key="d0"> 55:     public void export(HttpServletResponse response, SysDictData dictData)
 56:     {
 57:         List&lt;SysDictData&gt; list = dictDataService.selectDictDataList(dictData);
 58:         ExcelUtil&lt;SysDictData&gt; util = new ExcelUtil&lt;SysDictData&gt;(SysDictData.class);
 59:         util.exportExcel(response, list, "字典数据");
 60:     }</data>
  <data key="d2">SysDictDataController</data>
  <data key="d1">ExcelUtil</data>
  <data key="d3">SysDictDataController类调用ExcelUtil导出字典数据</data>
  <data key="d4">55</data>
  <data key="d5">60</data>
  <data key="d6">SysDictDataController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysDictDataController.java</data>
</node>
<node id="SysDictDataController.java|dictTypeService">
  <data key="d0"> 76:     public AjaxResult dictType(@PathVariable String dictType)
 77:     {
 78:         List&lt;SysDictData&gt; data = dictTypeService.selectDictDataByType(dictType);
 79:         if (StringUtils.isNull(data))
 80:         {
 81:             data = new ArrayList&lt;SysDictData&gt;();
 82:         }
 83:         return success(data);</data>
  <data key="d2">SysDictDataController</data>
  <data key="d1">dictTypeService</data>
  <data key="d3">SysDictDataController类调用dictTypeService获取指定类型的字典数据</data>
  <data key="d4">76</data>
  <data key="d5">83</data>
  <data key="d6">SysDictDataController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysDictDataController.java</data>
</node>
<node id="SysDictTypeController.java|SysDictTypeController">
  <data key="d0">128:         List&lt;SysDictType&gt; dictTypes = dictTypeService.selectDictTypeAll();
129:         return success(dictTypes);
130:     }</data>
  <data key="d1">selectDictTypeAll</data>
  <data key="d2">SysDictTypeController</data>
  <data key="d3">SysDictTypeController类通过dictTypeService获取所有字典类型用于选择框列表</data>
  <data key="d4">128</data>
  <data key="d5">130</data>
  <data key="d6">SysDictTypeController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysDictTypeController.java</data>
</node>
<node id="SysDictTypeController.java|dictTypeService">
  <data key="d0"> 25: /**
 26:  * 数据字典信息
 27:  * 
 28:  * @author ruoyi
 29:  */
 30: @RestController
 31: @RequestMapping("/system/dict/type")
 32: public class SysDictTypeController extends BaseController
 33: {
 34:     @Autowired
 35:     private ISysDictTypeService dictTypeService;
 36: 
 37:     @PreAuthorize("@ss.hasPermi('system:dict:list')")
 38:     @GetMapping("/list")
 39:     public TableDataInfo list(SysDictType dictType)
 40:     {
 41:         startPage();
 42:         List&lt;SysDictType&gt; list = dictTypeService.selectDictTypeList(dictType);
 43:         return getDataTable(list);
 44:     }
 45: 
 46:     @Log(title = "字典类型", businessType = BusinessType.EXPORT)
 47:     @PreAuthorize("@ss.hasPermi('system:dict:export')")
 48:     @PostMapping("/export")
 49:     public void export(HttpServletResponse response, SysDictType dictType)
 50:     {
 51:         List&lt;SysDictType&gt; list = dictTypeService.selectDictTypeList(dictType);
 52:         ExcelUtil&lt;SysDictType&gt; util = new ExcelUtil&lt;SysDictType&gt;(SysDictType.class);
 53:         util.exportExcel(response, list, "字典类型");
 54:     }
 55: 
 56:     /**
 57:      * 查询字典类型详细
 58:      */
 59:     @PreAuthorize("@ss.hasPermi('system:dict:query')")
 60:     @GetMapping(value = "/{dictId}")
 61:     public AjaxResult getInfo(@PathVariable Long dictId)
 62:     {
 63:         return success(dictTypeService.selectDictTypeById(dictId));
 64:     }
 65: 
 66:     /**
 67:      * 新增字典类型
 68:      */
 69:     @PreAuthorize("@ss.hasPermi('system:dict:add')")
 70:     @Log(title = "字典类型", businessType = BusinessType.INSERT)
 71:     @PostMapping
 72:     public AjaxResult add(@Validated @RequestBody SysDictType dict)
 73:     {
 74:         if (!dictTypeService.checkDictTypeUnique(dict))
 75:         {
 76:             return error("新增字典'" + dict.getDictName() + "'失败，字典类型已存在");
 77:         }
 78:         dict.setCreateBy(getUsername());
 79:         return toAjax(dictTypeService.insertDictType(dict));
 80:     }
 81: 
 82:     /**
 83:      * 修改字典类型
 84:      */
 85:     @PreAuthorize("@ss.hasPermi('system:dict:edit')")
 86:     @Log(title = "字典类型", businessType = BusinessType.UPDATE)
 87:     @PutMapping
 88:     public AjaxResult edit(@Validated @RequestBody SysDictType dict)
 89:     {
 90:         if (!dictTypeService.checkDictTypeUnique(dict))
 91:         {
 92:             return error("修改字典'" + dict.getDictName() + "'失败，字典类型已存在");
 93:         }
 94:         dict.setUpdateBy(getUsername());
 95:         return toAjax(dictTypeService.updateDictType(dict));
 96:     }
 97: 
 98:     /**
 99:      * 删除字典类型
100:      */
101:     @PreAuthorize("@ss.hasPermi('system:dict:remove')")
102:     @Log(title = "字典类型", businessType = BusinessType.DELETE)
103:     @DeleteMapping("/{dictIds}")
104:     public AjaxResult remove(@PathVariable Long[] dictIds)
105:     {
106:         dictTypeService.deleteDictTypeByIds(dictIds);
107:         return success();
108:     }
109: 
110:     /**
111:      * 刷新字典缓存
112:      */
113:     @PreAuthorize("@ss.hasPermi('system:dict:remove')")
114:     @Log(title = "字典类型", businessType = BusinessType.CLEAN)
115:     @DeleteMapping("/refreshCache")
116:     public AjaxResult refreshCache()
117:     {
118:         dictTypeService.resetDictCache();
119:         return success();
120:     }
121: 
122:     /**
123:      * 获取字典选择框列表
124:      */
125:     @GetMapping("/optionselect")
126:     public AjaxResult optionselect()
127:     {
128:         List&lt;SysDictType&gt; dictTypes = dictTypeService.selectDictTypeAll();
129:         return success(dictTypes);
130:     }
131: }</data>
  <data key="d2">SysDictTypeController</data>
  <data key="d1">dictTypeService</data>
  <data key="d3">SysDictTypeController类通过dictTypeService引用字典类型相关服务</data>
  <data key="d4">25</data>
  <data key="d5">131</data>
  <data key="d6">SysDictTypeController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysDictTypeController.java</data>
</node>
<node id="SysDictTypeController.java|selectDictTypeList">
  <data key="d0"> 38:     @GetMapping("/list")
 39:     public TableDataInfo list(SysDictType dictType)
 40:     {
 41:         startPage();
 42:         List&lt;SysDictType&gt; list = dictTypeService.selectDictTypeList(dictType);
 43:         return getDataTable(list);
 44:     }</data>
  <data key="d2">SysDictTypeController</data>
  <data key="d1">selectDictTypeList</data>
  <data key="d3">SysDictTypeController类调用dictTypeService查询字典类型列表</data>
  <data key="d4">38</data>
  <data key="d5">44</data>
  <data key="d6">SysDictTypeController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysDictTypeController.java</data>
</node>
<node id="SysDictTypeController.java|selectDictTypeById">
  <data key="d0"> 60:     @GetMapping(value = "/{dictId}")
 61:     public AjaxResult getInfo(@PathVariable Long dictId)
 62:     {
 63:         return success(dictTypeService.selectDictTypeById(dictId));
 64:     }</data>
  <data key="d2">SysDictTypeController</data>
  <data key="d1">selectDictTypeById</data>
  <data key="d3">SysDictTypeController类通过dictTypeService查询特定字典类型的详细信息</data>
  <data key="d4">60</data>
  <data key="d5">64</data>
  <data key="d6">SysDictTypeController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysDictTypeController.java</data>
</node>
<node id="SysDictTypeController.java|checkDictTypeUnique">
  <data key="d0"> 72:     public AjaxResult add(@Validated @RequestBody SysDictType dict)
 73:     {
 74:         if (!dictTypeService.checkDictTypeUnique(dict))
 75:         {
 76:             return error("新增字典'" + dict.getDictName() + "'失败，字典类型已存在");
 77:         }
 78:         dict.setCreateBy(getUsername());</data>
  <data key="d2">SysDictTypeController</data>
  <data key="d1">checkDictTypeUnique</data>
  <data key="d3">SysDictTypeController类在新增操作中调用dictTypeService检查字典类型唯一性</data>
  <data key="d4">72</data>
  <data key="d5">78</data>
  <data key="d6">SysDictTypeController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysDictTypeController.java</data>
</node>
<node id="SysDictTypeController.java|insertDictType">
  <data key="d0"> 79:         return toAjax(dictTypeService.insertDictType(dict));</data>
  <data key="d2">SysDictTypeController</data>
  <data key="d1">insertDictType</data>
  <data key="d3">SysDictTypeController类通过dictTypeService新增字典类型</data>
  <data key="d4">79</data>
  <data key="d5">79</data>
  <data key="d6">SysDictTypeController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysDictTypeController.java</data>
</node>
<node id="SysDictTypeController.java|updateDictType">
  <data key="d0"> 95:         return toAjax(dictTypeService.updateDictType(dict));</data>
  <data key="d2">SysDictTypeController</data>
  <data key="d1">updateDictType</data>
  <data key="d3">SysDictTypeController类通过dictTypeService更新字典类型</data>
  <data key="d4">95</data>
  <data key="d5">95</data>
  <data key="d6">SysDictTypeController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysDictTypeController.java</data>
</node>
<node id="SysDictTypeController.java|deleteDictTypeByIds">
  <data key="d0">106:         dictTypeService.deleteDictTypeByIds(dictIds);</data>
  <data key="d2">SysDictTypeController</data>
  <data key="d1">deleteDictTypeByIds</data>
  <data key="d3">SysDictTypeController类通过dictTypeService删除字典类型</data>
  <data key="d4">106</data>
  <data key="d5">106</data>
  <data key="d6">SysDictTypeController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysDictTypeController.java</data>
</node>
<node id="SysDictTypeController.java|resetDictCache">
  <data key="d0">118:         dictTypeService.resetDictCache();</data>
  <data key="d2">SysDictTypeController</data>
  <data key="d1">resetDictCache</data>
  <data key="d3">SysDictTypeController类调用dictTypeService刷新字典缓存</data>
  <data key="d4">118</data>
  <data key="d5">118</data>
  <data key="d6">SysDictTypeController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysDictTypeController.java</data>
</node>
<node id="SysDictTypeController.java|selectDictTypeAll">
  <data key="d0">128:         List&lt;SysDictType&gt; dictTypes = dictTypeService.selectDictTypeAll();
129:         return success(dictTypes);
130:     }</data>
  <data key="d2">SysDictTypeController</data>
  <data key="d1">selectDictTypeAll</data>
  <data key="d3">SysDictTypeController类通过dictTypeService获取所有字典类型用于选择框列表</data>
  <data key="d4">128</data>
  <data key="d5">130</data>
  <data key="d6">SysDictTypeController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysDictTypeController.java</data>
</node>
<node id="SysIndexController.java|SysIndexController">
  <data key="d0">19:     private RuoYiConfig ruoyiConfig;
20: 
21:     /**
22:      * 访问首页，提示语
23:      */
24:     @RequestMapping("/")
25:     public String index()
26:     {
27:         return StringUtils.format("欢迎使用{}后台管理框架，当前版本：v{}，请通过前端地址访问。", ruoyiConfig.getName(), ruoyiConfig.getVersion());</data>
  <data key="d1">RuoYiConfig</data>
  <data key="d2">SysIndexController</data>
  <data key="d3">SysIndexController类在index方法中调用ruoyiConfig的getName和getVersion方法</data>
  <data key="d4">19</data>
  <data key="d5">27</data>
  <data key="d6">SysIndexController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysIndexController.java</data>
</node>
<node id="SysIndexController.java|StringUtils">
  <data key="d0">25:     public String index()
26:     {
27:         return StringUtils.format("欢迎使用{}后台管理框架，当前版本：v{}，请通过前端地址访问。", ruoyiConfig.getName(), ruoyiConfig.getVersion());</data>
  <data key="d2">SysIndexController</data>
  <data key="d1">StringUtils</data>
  <data key="d3">SysIndexController类访问index方法，使用StringUtils格式化字符串</data>
  <data key="d4">25</data>
  <data key="d5">27</data>
  <data key="d6">SysIndexController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysIndexController.java</data>
</node>
<node id="SysIndexController.java|RuoYiConfig">
  <data key="d0">19:     private RuoYiConfig ruoyiConfig;
20: 
21:     /**
22:      * 访问首页，提示语
23:      */
24:     @RequestMapping("/")
25:     public String index()
26:     {
27:         return StringUtils.format("欢迎使用{}后台管理框架，当前版本：v{}，请通过前端地址访问。", ruoyiConfig.getName(), ruoyiConfig.getVersion());</data>
  <data key="d2">SysIndexController</data>
  <data key="d1">RuoYiConfig</data>
  <data key="d3">SysIndexController类在index方法中调用ruoyiConfig的getName和getVersion方法</data>
  <data key="d4">19</data>
  <data key="d5">27</data>
  <data key="d6">SysIndexController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysIndexController.java</data>
</node>
<node id="SysLoginController.java|SysLoginController">
  <data key="d0">90:     @GetMapping("getRouters")
91:     public AjaxResult getRouters()
92:     {
93:         Long userId = SecurityUtils.getUserId();
94:         List&lt;SysMenu&gt; menus = menuService.selectMenuTreeByUserId(userId);
95:         return AjaxResult.success(menuService.buildMenus(menus));</data>
  <data key="d1">ISysMenuService</data>
  <data key="d2">SysLoginController</data>
  <data key="d3">SysLoginController的getRouters方法通过调用menuService获取用户对应的菜单列表</data>
  <data key="d4">90</data>
  <data key="d5">95</data>
  <data key="d6">SysLoginController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysLoginController.java</data>
</node>
<node id="SysLoginController.java|SysLoginService">
  <data key="d0">48:     @PostMapping("/login")
49:     public AjaxResult login(@RequestBody LoginBody loginBody)
50:     {
51:         AjaxResult ajax = AjaxResult.success();
52:         // 生成令牌
53:         String token = loginService.login(loginBody.getUsername(), loginBody.getPassword(), loginBody.getCode(),
54:                 loginBody.getUuid());
55:         ajax.put(Constants.TOKEN, token);
56:         return ajax;</data>
  <data key="d2">SysLoginController</data>
  <data key="d1">SysLoginService</data>
  <data key="d3">SysLoginController的login方法通过调用loginService的login方法进行用户登录验证</data>
  <data key="d4">48</data>
  <data key="d5">56</data>
  <data key="d6">SysLoginController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysLoginController.java</data>
</node>
<node id="SysLoginController.java|SecurityUtils">
  <data key="d0">64:     @GetMapping("getInfo")
65:     public AjaxResult getInfo()
66:     {
67:         LoginUser loginUser = SecurityUtils.getLoginUser();
68:         SysUser user = loginUser.getUser();</data>
  <data key="d2">SysLoginController</data>
  <data key="d1">SecurityUtils</data>
  <data key="d3">SysLoginController的getInfo方法通过调用SecurityUtils获取当前登录用户信息</data>
  <data key="d4">64</data>
  <data key="d5">68</data>
  <data key="d6">SysLoginController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysLoginController.java</data>
</node>
<node id="SysLoginController.java|SysPermissionService">
  <data key="d0">70:         Set&lt;String&gt; roles = permissionService.getRolePermission(user);
71:         // 权限集合
72:         Set&lt;String&gt; permissions = permissionService.getMenuPermission(user);</data>
  <data key="d2">SysLoginController</data>
  <data key="d1">SysPermissionService</data>
  <data key="d3">SysLoginController的getInfo方法调用permissionService获取用户角色和权限集合</data>
  <data key="d4">70</data>
  <data key="d5">72</data>
  <data key="d6">SysLoginController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysLoginController.java</data>
</node>
<node id="SysLoginController.java|TokenService">
  <data key="d0">76:             tokenService.refreshToken(loginUser);</data>
  <data key="d2">SysLoginController</data>
  <data key="d1">TokenService</data>
  <data key="d3">SysLoginController的getInfo方法调用tokenService刷新令牌</data>
  <data key="d4">76</data>
  <data key="d5">76</data>
  <data key="d6">SysLoginController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysLoginController.java</data>
</node>
<node id="SysLoginController.java|ISysMenuService">
  <data key="d0">90:     @GetMapping("getRouters")
91:     public AjaxResult getRouters()
92:     {
93:         Long userId = SecurityUtils.getUserId();
94:         List&lt;SysMenu&gt; menus = menuService.selectMenuTreeByUserId(userId);
95:         return AjaxResult.success(menuService.buildMenus(menus));</data>
  <data key="d2">SysLoginController</data>
  <data key="d1">ISysMenuService</data>
  <data key="d3">SysLoginController的getRouters方法通过调用menuService获取用户对应的菜单列表</data>
  <data key="d4">90</data>
  <data key="d5">95</data>
  <data key="d6">SysLoginController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysLoginController.java</data>
</node>
<node id="SysMenuController.java|SysMenuController">
  <data key="d0">140:         return toAjax(menuService.deleteMenuById(menuId));</data>
  <data key="d1">menuService</data>
  <data key="d2">SysMenuController</data>
  <data key="d3">SysMenuController类通过menuService调用deleteMenuById删除菜单</data>
  <data key="d4">140</data>
  <data key="d5">140</data>
  <data key="d6">SysMenuController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysMenuController.java</data>
</node>
<node id="SysMenuController.java|menuService">
  <data key="d0"> 43:         List&lt;SysMenu&gt; menus = menuService.selectMenuList(menu, getUserId());
 44:         return success(menus);</data>
  <data key="d2">SysMenuController</data>
  <data key="d1">menuService</data>
  <data key="d3">SysMenuController类通过menuService调用selectMenuList方法获取菜单列表</data>
  <data key="d4">43</data>
  <data key="d5">44</data>
  <data key="d6">SysMenuController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysMenuController.java</data>
</node>
<node id="SysNoticeController.java|SysNoticeController">
  <data key="d0">88:     {
89:         return toAjax(noticeService.deleteNoticeByIds(noticeIds));
90:     }</data>
  <data key="d1">ISysNoticeService</data>
  <data key="d2">SysNoticeController</data>
  <data key="d3">SysNoticeController类通过noticeService调用deleteNoticeByIds方法删除通知公告</data>
  <data key="d4">88</data>
  <data key="d5">90</data>
  <data key="d6">SysNoticeController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysNoticeController.java</data>
</node>
<node id="SysNoticeController.java|ISysNoticeService">
  <data key="d0">40:     public TableDataInfo list(SysNotice notice)
41:     {
42:         startPage();
43:         List&lt;SysNotice&gt; list = noticeService.selectNoticeList(notice);
44:         return getDataTable(list);</data>
  <data key="d2">SysNoticeController</data>
  <data key="d1">ISysNoticeService</data>
  <data key="d3">SysNoticeController类通过noticeService调用selectNoticeList方法获取通知公告列表</data>
  <data key="d4">40</data>
  <data key="d5">44</data>
  <data key="d6">SysNoticeController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysNoticeController.java</data>
</node>
<node id="SysPostController.java|SysPostController">
  <data key="d0">127:         return success(posts);</data>
  <data key="d1">success</data>
  <data key="d2">SysPostController</data>
  <data key="d3">SysPostController类中的optionselect方法调用success返回获取岗位选择框列表的成功结果</data>
  <data key="d4">127</data>
  <data key="d5">127</data>
  <data key="d6">SysPostController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysPostController.java</data>
</node>
<node id="SysPostController.java|postService">
  <data key="d0"> 35:     private ISysPostService postService;</data>
  <data key="d2">SysPostController</data>
  <data key="d1">postService</data>
  <data key="d3">SysPostController类中postService属性用于调用ISysPostService接口的方法</data>
  <data key="d4">35</data>
  <data key="d5">35</data>
  <data key="d6">SysPostController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysPostController.java</data>
</node>
<node id="SysPostController.java|startPage">
  <data key="d0"> 44:         startPage();</data>
  <data key="d2">SysPostController</data>
  <data key="d1">startPage</data>
  <data key="d3">SysPostController类中的list方法调用startPage用于分页处理</data>
  <data key="d4">44</data>
  <data key="d5">44</data>
  <data key="d6">SysPostController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysPostController.java</data>
</node>
<node id="SysPostController.java|postService.selectPostList">
  <data key="d0"> 45:         List&lt;SysPost&gt; list = postService.selectPostList(post);</data>
  <data key="d2">SysPostController</data>
  <data key="d1">postService.selectPostList</data>
  <data key="d3">SysPostController类中的list方法调用postService的selectPostList获取岗位列表</data>
  <data key="d4">45</data>
  <data key="d5">45</data>
  <data key="d6">SysPostController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysPostController.java</data>
</node>
<node id="SysPostController.java|getDataTable">
  <data key="d0"> 46:         return getDataTable(list);</data>
  <data key="d2">SysPostController</data>
  <data key="d1">getDataTable</data>
  <data key="d3">SysPostController类中的list方法调用getDataTable将列表数据封装成TableDataInfo</data>
  <data key="d4">46</data>
  <data key="d5">46</data>
  <data key="d6">SysPostController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysPostController.java</data>
</node>
<node id="SysPostController.java|new ExcelUtil">
  <data key="d0"> 55:         ExcelUtil&lt;SysPost&gt; util = new ExcelUtil&lt;SysPost&gt;(SysPost.class);</data>
  <data key="d2">SysPostController</data>
  <data key="d1">new ExcelUtil</data>
  <data key="d3">SysPostController类中的export方法创建ExcelUtil对象以处理Excel导出</data>
  <data key="d4">55</data>
  <data key="d5">55</data>
  <data key="d6">SysPostController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysPostController.java</data>
</node>
<node id="SysPostController.java|ExcelUtil">
  <data key="d0"> 56:         util.exportExcel(response, list, "岗位数据");</data>
  <data key="d1">exportExcel</data>
  <data key="d2">ExcelUtil</data>
  <data key="d3">ExcelUtil类中的exportExcel方法用于导出岗位数据到Excel</data>
  <data key="d4">56</data>
  <data key="d5">56</data>
  <data key="d6">SysPostController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysPostController.java</data>
</node>
<node id="SysPostController.java|exportExcel">
  <data key="d0"> 56:         util.exportExcel(response, list, "岗位数据");</data>
  <data key="d2">ExcelUtil</data>
  <data key="d1">exportExcel</data>
  <data key="d3">ExcelUtil类中的exportExcel方法用于导出岗位数据到Excel</data>
  <data key="d4">56</data>
  <data key="d5">56</data>
  <data key="d6">SysPostController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysPostController.java</data>
</node>
<node id="SysPostController.java|postService.selectPostById">
  <data key="d0"> 66:         return success(postService.selectPostById(postId));</data>
  <data key="d2">SysPostController</data>
  <data key="d1">postService.selectPostById</data>
  <data key="d3">SysPostController类中的getInfo方法调用postService的selectPostById获取岗位详细信息</data>
  <data key="d4">66</data>
  <data key="d5">66</data>
  <data key="d6">SysPostController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysPostController.java</data>
</node>
<node id="SysPostController.java|success">
  <data key="d0"> 66:         return success(postService.selectPostById(postId));</data>
  <data key="d2">SysPostController</data>
  <data key="d1">success</data>
  <data key="d3">SysPostController类中的getInfo方法调用success返回获取岗位信息的成功结果</data>
  <data key="d4">66</data>
  <data key="d5">66</data>
  <data key="d6">SysPostController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysPostController.java</data>
</node>
<node id="SysPostController.java|postService.checkPostNameUnique">
  <data key="d0"> 77:         if (!postService.checkPostNameUnique(post))</data>
  <data key="d2">SysPostController</data>
  <data key="d1">postService.checkPostNameUnique</data>
  <data key="d3">SysPostController类中的add方法调用postService的checkPostNameUnique检查岗位名称唯一性</data>
  <data key="d4">77</data>
  <data key="d5">77</data>
  <data key="d6">SysPostController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysPostController.java</data>
</node>
<node id="SysPostController.java|error">
  <data key="d0"> 79:             return error("新增岗位'" + post.getPostName() + "'失败，岗位名称已存在");</data>
  <data key="d2">SysPostController</data>
  <data key="d1">error</data>
  <data key="d3">SysPostController类中的add方法调用error返回岗位名称已存在的错误信息</data>
  <data key="d4">79</data>
  <data key="d5">79</data>
  <data key="d6">SysPostController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysPostController.java</data>
</node>
<node id="SysPostController.java|postService.checkPostCodeUnique">
  <data key="d0"> 81:         else if (!postService.checkPostCodeUnique(post))</data>
  <data key="d2">SysPostController</data>
  <data key="d1">postService.checkPostCodeUnique</data>
  <data key="d3">SysPostController类中的add方法调用postService的checkPostCodeUnique检查岗位编码唯一性</data>
  <data key="d4">81</data>
  <data key="d5">81</data>
  <data key="d6">SysPostController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysPostController.java</data>
</node>
<node id="SysPostController.java|post.setCreateBy">
  <data key="d0"> 85:         post.setCreateBy(getUsername());</data>
  <data key="d2">SysPostController</data>
  <data key="d1">post.setCreateBy</data>
  <data key="d3">SysPostController类中的add方法设置岗位创建者</data>
  <data key="d4">85</data>
  <data key="d5">85</data>
  <data key="d6">SysPostController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysPostController.java</data>
</node>
<node id="SysPostController.java|postService.insertPost">
  <data key="d0"> 86:         return toAjax(postService.insertPost(post));</data>
  <data key="d2">SysPostController</data>
  <data key="d1">postService.insertPost</data>
  <data key="d3">SysPostController类中的add方法调用postService的insertPost插入新岗位</data>
  <data key="d4">86</data>
  <data key="d5">86</data>
  <data key="d6">SysPostController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysPostController.java</data>
</node>
<node id="SysPostController.java|Error">
  <data key="d0"> 99:             return error("修改岗位'" + post.getPostName() + "'失败，岗位名称已存在");</data>
  <data key="d2">SysPostController</data>
  <data key="d1">Error</data>
  <data key="d3">SysPostController类中的edit方法调用error返回修改岗位名称已存在的错误信息</data>
  <data key="d4">99</data>
  <data key="d5">99</data>
  <data key="d6">SysPostController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysPostController.java</data>
</node>
<node id="SysPostController.java|post.setUpdateBy">
  <data key="d0">105:         post.setUpdateBy(getUsername());</data>
  <data key="d2">SysPostController</data>
  <data key="d1">post.setUpdateBy</data>
  <data key="d3">SysPostController类中的edit方法设置岗位更新者</data>
  <data key="d4">105</data>
  <data key="d5">105</data>
  <data key="d6">SysPostController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysPostController.java</data>
</node>
<node id="SysPostController.java|postService.updatePost">
  <data key="d0">106:         return toAjax(postService.updatePost(post));</data>
  <data key="d2">SysPostController</data>
  <data key="d1">postService.updatePost</data>
  <data key="d3">SysPostController类中的edit方法调用postService的updatePost更新岗位信息</data>
  <data key="d4">106</data>
  <data key="d5">106</data>
  <data key="d6">SysPostController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysPostController.java</data>
</node>
<node id="SysPostController.java|postService.deletePostByIds">
  <data key="d0">117:         return toAjax(postService.deletePostByIds(postIds));</data>
  <data key="d2">SysPostController</data>
  <data key="d1">postService.deletePostByIds</data>
  <data key="d3">SysPostController类中的remove方法调用postService的deletePostByIds删除岗位</data>
  <data key="d4">117</data>
  <data key="d5">117</data>
  <data key="d6">SysPostController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysPostController.java</data>
</node>
<node id="SysPostController.java|toAjax">
  <data key="d0">117:         return toAjax(postService.deletePostByIds(postIds));</data>
  <data key="d2">SysPostController</data>
  <data key="d1">toAjax</data>
  <data key="d3">SysPostController类中的remove方法调用toAjax返回删除结果</data>
  <data key="d4">117</data>
  <data key="d5">117</data>
  <data key="d6">SysPostController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysPostController.java</data>
</node>
<node id="SysPostController.java|postService.selectPostAll">
  <data key="d0">126:         List&lt;SysPost&gt; posts = postService.selectPostAll();</data>
  <data key="d2">SysPostController</data>
  <data key="d1">postService.selectPostAll</data>
  <data key="d3">SysPostController类中的optionselect方法调用postService的selectPostAll获取所有岗位</data>
  <data key="d4">126</data>
  <data key="d5">126</data>
  <data key="d6">SysPostController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysPostController.java</data>
</node>
<node id="SysProfileController.java|SysProfileController">
  <data key="d0"> 46:     public AjaxResult profile()
 47:     {
 48:         LoginUser loginUser = getLoginUser();
 49:         SysUser user = loginUser.getUser();
 50:         AjaxResult ajax = AjaxResult.success(user);
 51:         ajax.put("roleGroup", userService.selectUserRoleGroup(loginUser.getUsername()));
 52:         ajax.put("postGroup", userService.selectUserPostGroup(loginUser.getUsername()));
 53:         return ajax;
 54:     }
 55: 
 56:     /**
 57:      * 修改用户
 58:      */
 59:     @Log(title = "个人信息", businessType = BusinessType.UPDATE)
 60:     @PutMapping
 61:     public AjaxResult updateProfile(@RequestBody SysUser user)
 62:     {
 63:         LoginUser loginUser = getLoginUser();
 64:         SysUser currentUser = loginUser.getUser();
 65:         currentUser.setNickName(user.getNickName());
 66:         currentUser.setEmail(user.getEmail());
 67:         currentUser.setPhonenumber(user.getPhonenumber());
 68:         currentUser.setSex(user.getSex());
 69:         if (StringUtils.isNotEmpty(user.getPhonenumber()) &amp;&amp; !userService.checkPhoneUnique(currentUser))
 70:         {
 71:             return error("修改用户'" + loginUser.getUsername() + "'失败，手机号码已存在");
 72:         }
 73:         if (StringUtils.isNotEmpty(user.getEmail()) &amp;&amp; !userService.checkEmailUnique(currentUser))
 74:         {
 75:             return error("修改用户'" + loginUser.getUsername() + "'失败，邮箱账号已存在");
 76:         }
 77:         if (userService.updateUserProfile(currentUser) &gt; 0)
 78:         {
 79:             // 更新缓存用户信息
 80:             tokenService.setLoginUser(loginUser);
 81:             return success();
 82:         }
 83:         return error("修改个人信息异常，请联系管理员");
 84:     }
 85: 
 86:     /**
 87:      * 重置密码
 88:      */
 89:     @Log(title = "个人信息", businessType = BusinessType.UPDATE)
 90:     @PutMapping("/updatePwd")
 91:     public AjaxResult updatePwd(@RequestBody Map&lt;String, String&gt; params)
 92:     {
 93:         String oldPassword = params.get("oldPassword");
 94:         String newPassword = params.get("newPassword");
 95:         LoginUser loginUser = getLoginUser();
 96:         String userName = loginUser.getUsername();
 97:         String password = loginUser.getPassword();
 98:         if (!SecurityUtils.matchesPassword(oldPassword, password))
 99:         {
100:             return error("修改密码失败，旧密码错误");
101:         }
102:         if (SecurityUtils.matchesPassword(newPassword, password))
103:         {
104:             return error("新密码不能与旧密码相同");
105:         }
106:         newPassword = SecurityUtils.encryptPassword(newPassword);
107:         if (userService.resetUserPwd(userName, newPassword) &gt; 0)
108:         {
109:             // 更新缓存用户密码
110:             loginUser.getUser().setPassword(newPassword);
111:             tokenService.setLoginUser(loginUser);
112:             return success();
113:         }
114:         return error("修改密码异常，请联系管理员");
115:     }
116: 
117:     /**
118:      * 头像上传
119:      */
120:     @Log(title = "用户头像", businessType = BusinessType.UPDATE)
121:     @PostMapping("/avatar")
122:     public AjaxResult avatar(@RequestParam("avatarfile") MultipartFile file) throws Exception
123:     {
124:         if (!file.isEmpty())
125:         {
126:             LoginUser loginUser = getLoginUser();
127:             String avatar = FileUploadUtils.upload(RuoYiConfig.getAvatarPath(), file, MimeTypeUtils.IMAGE_EXTENSION);
128:             if (userService.updateUserAvatar(loginUser.getUsername(), avatar))
129:             {
130:                 AjaxResult ajax = AjaxResult.success();
131:                 ajax.put("imgUrl", avatar);
132:                 // 更新缓存用户头像
133:                 loginUser.getUser().setAvatar(avatar);
134:                 tokenService.setLoginUser(loginUser);
135:                 return ajax;</data>
  <data key="d1">LoginUser</data>
  <data key="d2">SysProfileController</data>
  <data key="d3">用于获取当前登录用户信息</data>
  <data key="d4">46</data>
  <data key="d5">135</data>
  <data key="d6">SysProfileController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysProfileController.java</data>
</node>
<node id="SysProfileController.java|AjaxResult">
  <data key="d0"> 32: @RestController
 33: @RequestMapping("/system/user/profile")
 34: public class SysProfileController extends BaseController
 35: {
 36:     @Autowired
 37:     private ISysUserService userService;
 38: 
 39:     @Autowired
 40:     private TokenService tokenService;
 41: 
 42:     /**
 43:      * 个人信息
 44:      */
 45:     @GetMapping
 46:     public AjaxResult profile()
 47:     {
 48:         LoginUser loginUser = getLoginUser();
 49:         SysUser user = loginUser.getUser();
 50:         AjaxResult ajax = AjaxResult.success(user);
 51:         ajax.put("roleGroup", userService.selectUserRoleGroup(loginUser.getUsername()));
 52:         ajax.put("postGroup", userService.selectUserPostGroup(loginUser.getUsername()));
 53:         return ajax;
 54:     }
 55: 
 56:     /**
 57:      * 修改用户
 58:      */
 59:     @Log(title = "个人信息", businessType = BusinessType.UPDATE)
 60:     @PutMapping
 61:     public AjaxResult updateProfile(@RequestBody SysUser user)
 62:     {
 63:         LoginUser loginUser = getLoginUser();
 64:         SysUser currentUser = loginUser.getUser();
 65:         currentUser.setNickName(user.getNickName());
 66:         currentUser.setEmail(user.getEmail());
 67:         currentUser.setPhonenumber(user.getPhonenumber());
 68:         currentUser.setSex(user.getSex());
 69:         if (StringUtils.isNotEmpty(user.getPhonenumber()) &amp;&amp; !userService.checkPhoneUnique(currentUser))
 70:         {
 71:             return error("修改用户'" + loginUser.getUsername() + "'失败，手机号码已存在");
 72:         }
 73:         if (StringUtils.isNotEmpty(user.getEmail()) &amp;&amp; !userService.checkEmailUnique(currentUser))
 74:         {
 75:             return error("修改用户'" + loginUser.getUsername() + "'失败，邮箱账号已存在");
 76:         }
 77:         if (userService.updateUserProfile(currentUser) &gt; 0)
 78:         {
 79:             // 更新缓存用户信息
 80:             tokenService.setLoginUser(loginUser);
 81:             return success();
 82:         }
 83:         return error("修改个人信息异常，请联系管理员");
 84:     }
 85: 
 86:     /**
 87:      * 重置密码
 88:      */
 89:     @Log(title = "个人信息", businessType = BusinessType.UPDATE)
 90:     @PutMapping("/updatePwd")
 91:     public AjaxResult updatePwd(@RequestBody Map&lt;String, String&gt; params)
 92:     {
 93:         String oldPassword = params.get("oldPassword");
 94:         String newPassword = params.get("newPassword");
 95:         LoginUser loginUser = getLoginUser();
 96:         String userName = loginUser.getUsername();
 97:         String password = loginUser.getPassword();
 98:         if (!SecurityUtils.matchesPassword(oldPassword, password))
 99:         {
100:             return error("修改密码失败，旧密码错误");
101:         }
102:         if (SecurityUtils.matchesPassword(newPassword, password))
103:         {
104:             return error("新密码不能与旧密码相同");
105:         }
106:         newPassword = SecurityUtils.encryptPassword(newPassword);
107:         if (userService.resetUserPwd(userName, newPassword) &gt; 0)
108:         {
109:             // 更新缓存用户密码
110:             loginUser.getUser().setPassword(newPassword);
111:             tokenService.setLoginUser(loginUser);
112:             return success();
113:         }
114:         return error("修改密码异常，请联系管理员");
115:     }
116: 
117:     /**
118:      * 头像上传
119:      */
120:     @Log(title = "用户头像", businessType = BusinessType.UPDATE)
121:     @PostMapping("/avatar")
122:     public AjaxResult avatar(@RequestParam("avatarfile") MultipartFile file) throws Exception
123:     {
124:         if (!file.isEmpty())
125:         {
126:             LoginUser loginUser = getLoginUser();
127:             String avatar = FileUploadUtils.upload(RuoYiConfig.getAvatarPath(), file, MimeTypeUtils.IMAGE_EXTENSION);
128:             if (userService.updateUserAvatar(loginUser.getUsername(), avatar))
129:             {
130:                 AjaxResult ajax = AjaxResult.success();
131:                 ajax.put("imgUrl", avatar);
132:                 // 更新缓存用户头像
133:                 loginUser.getUser().setAvatar(avatar);
134:                 tokenService.setLoginUser(loginUser);
135:                 return ajax;
136:             }
137:         }
138:         return error("上传图片异常，请联系管理员");
139:     }
140: }</data>
  <data key="d2">SysProfileController</data>
  <data key="d1">AjaxResult</data>
  <data key="d3">SysProfileController类提供个人信息的获取和更新功能</data>
  <data key="d4">32</data>
  <data key="d5">140</data>
  <data key="d6">SysProfileController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysProfileController.java</data>
</node>
<node id="SysProfileController.java|ISysUserService">
  <data key="d0"> 32: @RestController
 33: @RequestMapping("/system/user/profile")
 34: public class SysProfileController extends BaseController
 35: {
 36:     @Autowired
 37:     private ISysUserService userService;
 38: 
 39:     @Autowired
 40:     private TokenService tokenService;
 41: 
 42:     /**
 43:      * 个人信息
 44:      */
 45:     @GetMapping
 46:     public AjaxResult profile()
 47:     {
 48:         LoginUser loginUser = getLoginUser();
 49:         SysUser user = loginUser.getUser();
 50:         AjaxResult ajax = AjaxResult.success(user);
 51:         ajax.put("roleGroup", userService.selectUserRoleGroup(loginUser.getUsername()));
 52:         ajax.put("postGroup", userService.selectUserPostGroup(loginUser.getUsername()));
 53:         return ajax;
 54:     }
 55: 
 56:     /**
 57:      * 修改用户
 58:      */
 59:     @Log(title = "个人信息", businessType = BusinessType.UPDATE)
 60:     @PutMapping
 61:     public AjaxResult updateProfile(@RequestBody SysUser user)
 62:     {
 63:         LoginUser loginUser = getLoginUser();
 64:         SysUser currentUser = loginUser.getUser();
 65:         currentUser.setNickName(user.getNickName());
 66:         currentUser.setEmail(user.getEmail());
 67:         currentUser.setPhonenumber(user.getPhonenumber());
 68:         currentUser.setSex(user.getSex());
 69:         if (StringUtils.isNotEmpty(user.getPhonenumber()) &amp;&amp; !userService.checkPhoneUnique(currentUser))
 70:         {
 71:             return error("修改用户'" + loginUser.getUsername() + "'失败，手机号码已存在");
 72:         }
 73:         if (StringUtils.isNotEmpty(user.getEmail()) &amp;&amp; !userService.checkEmailUnique(currentUser))
 74:         {
 75:             return error("修改用户'" + loginUser.getUsername() + "'失败，邮箱账号已存在");
 76:         }
 77:         if (userService.updateUserProfile(currentUser) &gt; 0)
 78:         {
 79:             // 更新缓存用户信息
 80:             tokenService.setLoginUser(loginUser);
 81:             return success();
 82:         }
 83:         return error("修改个人信息异常，请联系管理员");
 84:     }
 85: 
 86:     /**
 87:      * 重置密码
 88:      */
 89:     @Log(title = "个人信息", businessType = BusinessType.UPDATE)
 90:     @PutMapping("/updatePwd")
 91:     public AjaxResult updatePwd(@RequestBody Map&lt;String, String&gt; params)
 92:     {
 93:         String oldPassword = params.get("oldPassword");
 94:         String newPassword = params.get("newPassword");
 95:         LoginUser loginUser = getLoginUser();
 96:         String userName = loginUser.getUsername();
 97:         String password = loginUser.getPassword();
 98:         if (!SecurityUtils.matchesPassword(oldPassword, password))
 99:         {
100:             return error("修改密码失败，旧密码错误");
101:         }
102:         if (SecurityUtils.matchesPassword(newPassword, password))
103:         {
104:             return error("新密码不能与旧密码相同");
105:         }
106:         newPassword = SecurityUtils.encryptPassword(newPassword);
107:         if (userService.resetUserPwd(userName, newPassword) &gt; 0)
108:         {
109:             // 更新缓存用户密码
110:             loginUser.getUser().setPassword(newPassword);
111:             tokenService.setLoginUser(loginUser);
112:             return success();
113:         }
114:         return error("修改密码异常，请联系管理员");
115:     }
116: 
117:     /**
118:      * 头像上传
119:      */
120:     @Log(title = "用户头像", businessType = BusinessType.UPDATE)
121:     @PostMapping("/avatar")
122:     public AjaxResult avatar(@RequestParam("avatarfile") MultipartFile file) throws Exception
123:     {
124:         if (!file.isEmpty())
125:         {
126:             LoginUser loginUser = getLoginUser();
127:             String avatar = FileUploadUtils.upload(RuoYiConfig.getAvatarPath(), file, MimeTypeUtils.IMAGE_EXTENSION);
128:             if (userService.updateUserAvatar(loginUser.getUsername(), avatar))
129:             {
130:                 AjaxResult ajax = AjaxResult.success();
131:                 ajax.put("imgUrl", avatar);
132:                 // 更新缓存用户头像
133:                 loginUser.getUser().setAvatar(avatar);
134:                 tokenService.setLoginUser(loginUser);
135:                 return ajax;
136:             }
137:         }
138:         return error("上传图片异常，请联系管理员");
139:     }
140: }</data>
  <data key="d2">SysProfileController</data>
  <data key="d1">ISysUserService</data>
  <data key="d3">SysProfileController类中用于获取用户角色和岗位信息</data>
  <data key="d4">32</data>
  <data key="d5">140</data>
  <data key="d6">SysProfileController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysProfileController.java</data>
</node>
<node id="SysProfileController.java|TokenService">
  <data key="d0"> 80:             tokenService.setLoginUser(loginUser);</data>
  <data key="d2">TokenService</data>
  <data key="d1">LoginUser</data>
  <data key="d3">TokenService类更新用户的登录缓存</data>
  <data key="d4">80</data>
  <data key="d5">80</data>
  <data key="d6">SysProfileController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysProfileController.java</data>
</node>
<node id="SysProfileController.java|LoginUser">
  <data key="d0"> 49:         SysUser user = loginUser.getUser();</data>
  <data key="d2">LoginUser</data>
  <data key="d1">SysUser</data>
  <data key="d3">LoginUser类获取用户信息</data>
  <data key="d4">49</data>
  <data key="d5">49</data>
  <data key="d6">SysProfileController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysProfileController.java</data>
</node>
<node id="SysProfileController.java|SysUser">
  <data key="d0"> 77:         if (userService.updateUserProfile(currentUser) &gt; 0)</data>
  <data key="d2">SysUser</data>
  <data key="d1">ISysUserService</data>
  <data key="d3">用于更新用户信息和检查用户唯一性</data>
  <data key="d4">77</data>
  <data key="d5">77</data>
  <data key="d6">SysProfileController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysProfileController.java</data>
</node>
<node id="SysProfileController.java|StringUtils">
  <data key="d0"> 69:         if (StringUtils.isNotEmpty(user.getPhonenumber()) &amp;&amp; !userService.checkPhoneUnique(currentUser))
 70:         {
 71:             return error("修改用户'" + loginUser.getUsername() + "'失败，手机号码已存在");
 72:         }
 73:         if (StringUtils.isNotEmpty(user.getEmail()) &amp;&amp; !userService.checkEmailUnique(currentUser))</data>
  <data key="d2">SysUser</data>
  <data key="d1">StringUtils</data>
  <data key="d3">用于手机号和邮箱唯一性检查</data>
  <data key="d4">69</data>
  <data key="d5">73</data>
  <data key="d6">SysProfileController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysProfileController.java</data>
</node>
<node id="SysProfileController.java|SecurityUtils">
  <data key="d0"> 98:         if (!SecurityUtils.matchesPassword(oldPassword, password))
 99:         {
100:             return error("修改密码失败，旧密码错误");
101:         }
102:         if (SecurityUtils.matchesPassword(newPassword, password))
103:         {
104:             return error("新密码不能与旧密码相同");
105:         }
106:         newPassword = SecurityUtils.encryptPassword(newPassword);</data>
  <data key="d1">String</data>
  <data key="d2">SecurityUtils</data>
  <data key="d3">用于密码的匹配和加密功能</data>
  <data key="d4">98</data>
  <data key="d5">106</data>
  <data key="d6">SysProfileController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysProfileController.java</data>
</node>
<node id="SysProfileController.java|String">
  <data key="d0"> 98:         if (!SecurityUtils.matchesPassword(oldPassword, password))
 99:         {
100:             return error("修改密码失败，旧密码错误");
101:         }
102:         if (SecurityUtils.matchesPassword(newPassword, password))
103:         {
104:             return error("新密码不能与旧密码相同");
105:         }
106:         newPassword = SecurityUtils.encryptPassword(newPassword);</data>
  <data key="d2">SecurityUtils</data>
  <data key="d1">String</data>
  <data key="d3">用于密码的匹配和加密功能</data>
  <data key="d4">98</data>
  <data key="d5">106</data>
  <data key="d6">SysProfileController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysProfileController.java</data>
</node>
<node id="SysProfileController.java|FileUploadUtils">
  <data key="d0">127:             String avatar = FileUploadUtils.upload(RuoYiConfig.getAvatarPath(), file, MimeTypeUtils.IMAGE_EXTENSION);</data>
  <data key="d1">String</data>
  <data key="d2">FileUploadUtils</data>
  <data key="d3">用于处理用户头像的上传</data>
  <data key="d4">127</data>
  <data key="d5">127</data>
  <data key="d6">SysProfileController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysProfileController.java</data>
</node>
<node id="SysRegisterController.java|SysRegisterController">
  <data key="d0">36:         return StringUtils.isEmpty(msg) ? success() : error(msg);</data>
  <data key="d1">StringUtils</data>
  <data key="d2">SysRegisterController</data>
  <data key="d3">SysRegisterController类的register方法通过调用StringUtils的isEmpty方法检查注册结果是否为空</data>
  <data key="d4">36</data>
  <data key="d5">36</data>
  <data key="d6">SysRegisterController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysRegisterController.java</data>
</node>
<node id="SysRegisterController.java|configService">
  <data key="d0">28:     @PostMapping("/register")
29:     public AjaxResult register(@RequestBody RegisterBody user)
30:     {
31:         if (!("true".equals(configService.selectConfigByKey("sys.account.registerUser"))))
32:         {
33:             return error("当前系统没有开启注册功能！");
34:         }
35:         String msg = registerService.register(user);
36:         return StringUtils.isEmpty(msg) ? success() : error(msg);</data>
  <data key="d2">SysRegisterController</data>
  <data key="d1">configService</data>
  <data key="d3">SysRegisterController类的register方法通过调用configService的selectConfigByKey方法检查注册功能是否开启</data>
  <data key="d4">28</data>
  <data key="d5">36</data>
  <data key="d6">SysRegisterController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysRegisterController.java</data>
</node>
<node id="SysRegisterController.java|registerService">
  <data key="d0">35:         String msg = registerService.register(user);
36:         return StringUtils.isEmpty(msg) ? success() : error(msg);</data>
  <data key="d2">SysRegisterController</data>
  <data key="d1">registerService</data>
  <data key="d3">SysRegisterController类的register方法通过调用registerService的register方法进行用户注册</data>
  <data key="d4">35</data>
  <data key="d5">36</data>
  <data key="d6">SysRegisterController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysRegisterController.java</data>
</node>
<node id="SysRegisterController.java|StringUtils">
  <data key="d0">36:         return StringUtils.isEmpty(msg) ? success() : error(msg);</data>
  <data key="d2">SysRegisterController</data>
  <data key="d1">StringUtils</data>
  <data key="d3">SysRegisterController类的register方法通过调用StringUtils的isEmpty方法检查注册结果是否为空</data>
  <data key="d4">36</data>
  <data key="d5">36</data>
  <data key="d6">SysRegisterController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysRegisterController.java</data>
</node>
<node id="SysRoleController.java|SysRoleController">
  <data key="d0">259:         ajax.put("depts", deptService.selectDeptTreeList(new SysDept()));</data>
  <data key="d1">deptService</data>
  <data key="d2">SysRoleController</data>
  <data key="d3">SysRoleController类通过deptService调用selectDeptTreeList方法获取部门树列表</data>
  <data key="d4">259</data>
  <data key="d5">259</data>
  <data key="d6">SysRoleController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysRoleController.java</data>
</node>
<node id="SysRoleController.java|roleService">
  <data key="d0"> 60:     public TableDataInfo list(SysRole role)
 61:     {
 62:         startPage();
 63:         List&lt;SysRole&gt; list = roleService.selectRoleList(role);
 64:         return getDataTable(list);</data>
  <data key="d2">SysRoleController</data>
  <data key="d1">roleService</data>
  <data key="d3">SysRoleController类通过roleService调用selectRoleList方法获取角色列表</data>
  <data key="d4">60</data>
  <data key="d5">64</data>
  <data key="d6">SysRoleController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysRoleController.java</data>
</node>
<node id="SysRoleController.java|ExcelUtil">
  <data key="d0"> 70:     public void export(HttpServletResponse response, SysRole role)
 71:     {
 72:         List&lt;SysRole&gt; list = roleService.selectRoleList(role);
 73:         ExcelUtil&lt;SysRole&gt; util = new ExcelUtil&lt;SysRole&gt;(SysRole.class);
 74:         util.exportExcel(response, list, "角色数据");</data>
  <data key="d2">SysRoleController</data>
  <data key="d1">ExcelUtil</data>
  <data key="d3">SysRoleController类通过ExcelUtil导出角色数据到Excel文件</data>
  <data key="d4">70</data>
  <data key="d5">74</data>
  <data key="d6">SysRoleController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysRoleController.java</data>
</node>
<node id="SysRoleController.java|userService">
  <data key="d0">135:                 loginUser.setUser(userService.selectUserByUserName(loginUser.getUser().getUserName()));</data>
  <data key="d2">SysRoleController</data>
  <data key="d1">userService</data>
  <data key="d3">SysRoleController类通过userService调用selectUserByUserName方法获取用户信息</data>
  <data key="d4">135</data>
  <data key="d5">135</data>
  <data key="d6">SysRoleController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysRoleController.java</data>
</node>
<node id="SysRoleController.java|permissionService">
  <data key="d0">136:                 loginUser.setPermissions(permissionService.getMenuPermission(loginUser.getUser()));</data>
  <data key="d2">SysRoleController</data>
  <data key="d1">permissionService</data>
  <data key="d3">SysRoleController类通过permissionService获取用户权限</data>
  <data key="d4">136</data>
  <data key="d5">136</data>
  <data key="d6">SysRoleController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysRoleController.java</data>
</node>
<node id="SysRoleController.java|tokenService">
  <data key="d0">137:                 tokenService.setLoginUser(loginUser);</data>
  <data key="d2">SysRoleController</data>
  <data key="d1">tokenService</data>
  <data key="d3">SysRoleController类通过tokenService设置登录用户信息</data>
  <data key="d4">137</data>
  <data key="d5">137</data>
  <data key="d6">SysRoleController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysRoleController.java</data>
</node>
<node id="SysRoleController.java|deptService">
  <data key="d0">258:         ajax.put("checkedKeys", deptService.selectDeptListByRoleId(roleId));</data>
  <data key="d2">SysRoleController</data>
  <data key="d1">deptService</data>
  <data key="d3">SysRoleController类通过deptService调用selectDeptListByRoleId方法获取部门列表</data>
  <data key="d4">258</data>
  <data key="d5">258</data>
  <data key="d6">SysRoleController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysRoleController.java</data>
</node>
<node id="SysUserController.java|SysUserController">
  <data key="d0">254:         return success(deptService.selectDeptTreeList(dept));</data>
  <data key="d1">deptService</data>
  <data key="d2">SysUserController</data>
  <data key="d3">SysUserController类中的deptTree方法获取部门树列表，调用deptService的selectDeptTreeList方法</data>
  <data key="d4">254</data>
  <data key="d5">254</data>
  <data key="d6">SysUserController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysUserController.java</data>
</node>
<node id="SysUserController.java|userService">
  <data key="d0"> 61:     public TableDataInfo list(SysUser user)
 62:     {
 63:         startPage();
 64:         List&lt;SysUser&gt; list = userService.selectUserList(user);
 65:         return getDataTable(list);
 66:     }</data>
  <data key="d2">SysUserController</data>
  <data key="d1">userService</data>
  <data key="d3">SysUserController类中的list方法获取用户列表，调用userService的selectUserList方法</data>
  <data key="d4">61</data>
  <data key="d5">66</data>
  <data key="d6">SysUserController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysUserController.java</data>
</node>
<node id="SysUserController.java|ExcelUtil">
  <data key="d0"> 71:     public void export(HttpServletResponse response, SysUser user)
 72:     {
 73:         List&lt;SysUser&gt; list = userService.selectUserList(user);
 74:         ExcelUtil&lt;SysUser&gt; util = new ExcelUtil&lt;SysUser&gt;(SysUser.class);
 75:         util.exportExcel(response, list, "用户数据");</data>
  <data key="d2">SysUserController</data>
  <data key="d1">ExcelUtil</data>
  <data key="d3">SysUserController类中的export方法导出用户列表到Excel，调用ExcelUtil的exportExcel方法</data>
  <data key="d4">71</data>
  <data key="d5">75</data>
  <data key="d6">SysUserController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysUserController.java</data>
</node>
<node id="SysUserController.java|roleService">
  <data key="d0">113:         List&lt;SysRole&gt; roles = roleService.selectRoleAll();
114:         ajax.put("roles", SysUser.isAdmin(userId) ? roles : roles.stream().filter(r -&gt; !r.isAdmin()).collect(Collectors.toList()));</data>
  <data key="d2">SysUserController</data>
  <data key="d1">roleService</data>
  <data key="d3">SysUserController类中的getInfo方法获取用户角色信息，调用roleService的selectRoleAll方法</data>
  <data key="d4">113</data>
  <data key="d5">114</data>
  <data key="d6">SysUserController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysUserController.java</data>
</node>
<node id="SysUserController.java|deptService">
  <data key="d0">127:         deptService.checkDeptDataScope(user.getDeptId());</data>
  <data key="d2">SysUserController</data>
  <data key="d1">deptService</data>
  <data key="d3">SysUserController类中的add方法检查部门数据权限，调用deptService的checkDeptDataScope方法</data>
  <data key="d4">127</data>
  <data key="d5">127</data>
  <data key="d6">SysUserController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysUserController.java</data>
</node>
<node id="TestController.java|TestController">
  <data key="d0">109:         else
110:         {
111:             return R.fail("用户不存在");</data>
  <data key="d1">R.fail</data>
  <data key="d2">TestController</data>
  <data key="d3">TestController类的delete方法在用户不存在时返回失败信息</data>
  <data key="d4">109</data>
  <data key="d5">111</data>
  <data key="d6">TestController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\tool\TestController.java</data>
</node>
<node id="TestController.java|R.ok">
  <data key="d0"> 43:     public R&lt;List&lt;UserEntity&gt;&gt; userList()
 44:     {
 45:         List&lt;UserEntity&gt; userList = new ArrayList&lt;UserEntity&gt;(users.values());
 46:         return R.ok(userList);</data>
  <data key="d2">TestController</data>
  <data key="d1">R.ok</data>
  <data key="d3">TestController类的userList方法获取用户列表并返回R对象</data>
  <data key="d4">43</data>
  <data key="d5">46</data>
  <data key="d6">TestController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\tool\TestController.java</data>
</node>
<node id="TestController.java|R.fail">
  <data key="d0"> 58:         else
 59:         {
 60:             return R.fail("用户不存在");
 61:         }</data>
  <data key="d2">TestController</data>
  <data key="d1">R.fail</data>
  <data key="d3">TestController类的getUser方法在用户不存在时返回失败信息</data>
  <data key="d4">58</data>
  <data key="d5">61</data>
  <data key="d6">TestController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\tool\TestController.java</data>
</node>
<node id="TestController.java|UserEntity">
  <data key="d0">180:     {
181:         this.mobile = mobile;
182:     }</data>
  <data key="d1">void setMobile</data>
  <data key="d2">UserEntity</data>
  <data key="d3">UserEntity类的setMobile方法设置用户手机</data>
  <data key="d4">180</data>
  <data key="d5">182</data>
  <data key="d6">TestController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\tool\TestController.java</data>
</node>
<node id="TestController.java|StringUtils.isNull">
  <data key="d0">136:     public UserEntity(Integer userId, String username, String password, String mobile)
137:     {
138:         this.userId = userId;
139:         this.username = username;
140:         this.password = password;
141:         this.mobile = mobile;</data>
  <data key="d2">UserEntity</data>
  <data key="d1">StringUtils.isNull</data>
  <data key="d3">UserEntity类构造方法用于初始化用户对象的各个属性</data>
  <data key="d4">136</data>
  <data key="d5">141</data>
  <data key="d6">TestController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\tool\TestController.java</data>
</node>
<node id="TestController.java|Integer getUserId">
  <data key="d0">144:     public Integer getUserId()
145:     {
146:         return userId;</data>
  <data key="d2">UserEntity</data>
  <data key="d1">Integer getUserId</data>
  <data key="d3">UserEntity类的getUserId方法获取用户ID</data>
  <data key="d4">144</data>
  <data key="d5">146</data>
  <data key="d6">TestController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\tool\TestController.java</data>
</node>
<node id="TestController.java|void setUserId">
  <data key="d0">149:     public void setUserId(Integer userId)
150:     {
151:         this.userId = userId;
152:     }</data>
  <data key="d2">UserEntity</data>
  <data key="d1">void setUserId</data>
  <data key="d3">UserEntity类的setUserId方法设置用户ID</data>
  <data key="d4">149</data>
  <data key="d5">152</data>
  <data key="d6">TestController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\tool\TestController.java</data>
</node>
<node id="TestController.java|String getUsername">
  <data key="d0">154:     public String getUsername()
155:     {
156:         return username;</data>
  <data key="d2">UserEntity</data>
  <data key="d1">String getUsername</data>
  <data key="d3">UserEntity类的getUsername方法获取用户名</data>
  <data key="d4">154</data>
  <data key="d5">156</data>
  <data key="d6">TestController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\tool\TestController.java</data>
</node>
<node id="TestController.java|void setUsername">
  <data key="d0">159:     public void setUsername(String username)
160:     {
161:         this.username = username;
162:     }</data>
  <data key="d2">UserEntity</data>
  <data key="d1">void setUsername</data>
  <data key="d3">UserEntity类的setUsername方法设置用户名</data>
  <data key="d4">159</data>
  <data key="d5">162</data>
  <data key="d6">TestController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\tool\TestController.java</data>
</node>
<node id="TestController.java|String getPassword">
  <data key="d0">164:     public String getPassword()
165:     {
166:         return password;</data>
  <data key="d2">UserEntity</data>
  <data key="d1">String getPassword</data>
  <data key="d3">UserEntity类的getPassword方法获取用户密码</data>
  <data key="d4">164</data>
  <data key="d5">166</data>
  <data key="d6">TestController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\tool\TestController.java</data>
</node>
<node id="TestController.java|void setPassword">
  <data key="d0">169:     public void setPassword(String password)
170:     {
171:         this.password = password;
172:     }</data>
  <data key="d2">UserEntity</data>
  <data key="d1">void setPassword</data>
  <data key="d3">UserEntity类的setPassword方法设置用户密码</data>
  <data key="d4">169</data>
  <data key="d5">172</data>
  <data key="d6">TestController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\tool\TestController.java</data>
</node>
<node id="TestController.java|String getMobile">
  <data key="d0">175:     {
176:         return mobile;
177:     }</data>
  <data key="d2">UserEntity</data>
  <data key="d1">String getMobile</data>
  <data key="d3">UserEntity类的getMobile方法获取用户手机</data>
  <data key="d4">175</data>
  <data key="d5">177</data>
  <data key="d6">TestController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\tool\TestController.java</data>
</node>
<node id="TestController.java|void setMobile">
  <data key="d0">180:     {
181:         this.mobile = mobile;
182:     }</data>
  <data key="d2">UserEntity</data>
  <data key="d1">void setMobile</data>
  <data key="d3">UserEntity类的setMobile方法设置用户手机</data>
  <data key="d4">180</data>
  <data key="d5">182</data>
  <data key="d6">TestController.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\controller\tool\TestController.java</data>
</node>
<node id="SwaggerConfig.java|SwaggerConfig">
  <data key="d0"> 49:     public Docket createRestApi()
 50:     {
 51:         return new Docket(DocumentationType.OAS_30)
 52:                 // 是否启用Swagger
 53:                 .enable(enabled)
 54:                 // 用来创建该API的基本信息，展示在文档的页面中（自定义展示的信息）
 55:                 .apiInfo(apiInfo())
 56:                 // 设置哪些接口暴露给Swagger展示
 57:                 .select()
 58:                 // 扫描所有有注解的api，用这种方式更灵活
 59:                 .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))
 60:                 // 扫描指定包中的swagger注解
 61:                 // .apis(RequestHandlerSelectors.basePackage("com.ruoyi.project.tool.swagger"))
 62:                 // 扫描所有 .apis(RequestHandlerSelectors.any())
 63:                 .paths(PathSelectors.any())
 64:                 .build()
 65:                 /* 设置安全模式，swagger可以设置访问token */
 66:                 .securitySchemes(securitySchemes())
 67:                 .securityContexts(securityContexts())
 68:                 .pathMapping(pathMapping);</data>
  <data key="d1">Docket</data>
  <data key="d2">SwaggerConfig</data>
  <data key="d3">SwaggerConfig类中的createRestApi方法创建Docket对象以配置Swagger接口文档</data>
  <data key="d4">49</data>
  <data key="d5">68</data>
  <data key="d6">SwaggerConfig.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\core\config\SwaggerConfig.java</data>
</node>
<node id="SwaggerConfig.java|RuoYiConfig">
  <data key="d0"> 31: public class SwaggerConfig
 32: {
 33:     /** 系统基础配置 */
 34:     @Autowired
 35:     private RuoYiConfig ruoyiConfig;</data>
  <data key="d2">SwaggerConfig</data>
  <data key="d1">RuoYiConfig</data>
  <data key="d3">SwaggerConfig类用于配置Swagger2的接口文档，依赖RuoYiConfig作为系统基础配置</data>
  <data key="d4">31</data>
  <data key="d5">35</data>
  <data key="d6">SwaggerConfig.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\core\config\SwaggerConfig.java</data>
</node>
<node id="SwaggerConfig.java|Docket">
  <data key="d0"> 67:                 .securityContexts(securityContexts())
 68:                 .pathMapping(pathMapping);</data>
  <data key="d2">Docket</data>
  <data key="d1">securityContexts</data>
  <data key="d3">Docket对象调用securityContexts()方法配置安全上下文</data>
  <data key="d4">67</data>
  <data key="d5">68</data>
  <data key="d6">SwaggerConfig.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\core\config\SwaggerConfig.java</data>
</node>
<node id="SwaggerConfig.java|ApiInfo">
  <data key="d0">114:         return new ApiInfoBuilder()
115:                 // 设置标题
116:                 .title("标题：若依管理系统_接口文档")
117:                 // 描述
118:                 .description("描述：用于管理集团旗下公司的人员信息,具体包括XXX,XXX模块...")
119:                 // 作者信息
120:                 .contact(new Contact(ruoyiConfig.getName(), null, null))
121:                 // 版本
122:                 .version("版本号:" + ruoyiConfig.getVersion())
123:                 .build();
124:     }</data>
  <data key="d2">ApiInfo</data>
  <data key="d1">ApiInfoBuilder</data>
  <data key="d3">apiInfo方法使用ApiInfoBuilder构建ApiInfo对象，提供API的详细信息</data>
  <data key="d4">114</data>
  <data key="d5">124</data>
  <data key="d6">SwaggerConfig.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\core\config\SwaggerConfig.java</data>
</node>
<node id="SwaggerConfig.java|RequestHandlerSelectors">
  <data key="d0"> 59:                 .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</data>
  <data key="d2">Docket</data>
  <data key="d1">RequestHandlerSelectors</data>
  <data key="d3">Docket对象使用RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class)获取带有@ApiOperation注解的方法</data>
  <data key="d4">59</data>
  <data key="d5">59</data>
  <data key="d6">SwaggerConfig.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\core\config\SwaggerConfig.java</data>
</node>
<node id="SwaggerConfig.java|PathSelectors">
  <data key="d0"> 63:                 .paths(PathSelectors.any())</data>
  <data key="d2">Docket</data>
  <data key="d1">PathSelectors</data>
  <data key="d3">Docket对象调用PathSelectors.any()来设置请求路径的选择器</data>
  <data key="d4">63</data>
  <data key="d5">63</data>
  <data key="d6">SwaggerConfig.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\core\config\SwaggerConfig.java</data>
</node>
<node id="SwaggerConfig.java|securitySchemes">
  <data key="d0"> 66:                 .securitySchemes(securitySchemes())
 67:                 .securityContexts(securityContexts())
 68:                 .pathMapping(pathMapping);</data>
  <data key="d2">Docket</data>
  <data key="d1">securitySchemes</data>
  <data key="d3">Docket对象调用securitySchemes()方法配置安全模式的Scheme</data>
  <data key="d4">66</data>
  <data key="d5">68</data>
  <data key="d6">SwaggerConfig.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\core\config\SwaggerConfig.java</data>
</node>
<node id="SwaggerConfig.java|securityContexts">
  <data key="d0"> 67:                 .securityContexts(securityContexts())
 68:                 .pathMapping(pathMapping);</data>
  <data key="d2">Docket</data>
  <data key="d1">securityContexts</data>
  <data key="d3">Docket对象调用securityContexts()方法配置安全上下文</data>
  <data key="d4">67</data>
  <data key="d5">68</data>
  <data key="d6">SwaggerConfig.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\core\config\SwaggerConfig.java</data>
</node>
<node id="SwaggerConfig.java|ApiInfoBuilder">
  <data key="d0">114:         return new ApiInfoBuilder()
115:                 // 设置标题
116:                 .title("标题：若依管理系统_接口文档")
117:                 // 描述
118:                 .description("描述：用于管理集团旗下公司的人员信息,具体包括XXX,XXX模块...")
119:                 // 作者信息
120:                 .contact(new Contact(ruoyiConfig.getName(), null, null))
121:                 // 版本
122:                 .version("版本号:" + ruoyiConfig.getVersion())
123:                 .build();
124:     }</data>
  <data key="d2">ApiInfo</data>
  <data key="d1">ApiInfoBuilder</data>
  <data key="d3">apiInfo方法使用ApiInfoBuilder构建ApiInfo对象，提供API的详细信息</data>
  <data key="d4">114</data>
  <data key="d5">124</data>
  <data key="d6">SwaggerConfig.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\core\config\SwaggerConfig.java</data>
</node>
<node id="SwaggerConfig.java|SecurityContext">
  <data key="d0"> 89:                         .securityReferences(defaultAuth())</data>
  <data key="d1">defaultAuth</data>
  <data key="d2">SecurityContext</data>
  <data key="d3">securityContexts方法调用defaultAuth()以定义默认的安全引用</data>
  <data key="d4">89</data>
  <data key="d5">89</data>
  <data key="d6">SwaggerConfig.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\core\config\SwaggerConfig.java</data>
</node>
<node id="SwaggerConfig.java|defaultAuth">
  <data key="d0"> 89:                         .securityReferences(defaultAuth())</data>
  <data key="d2">SecurityContext</data>
  <data key="d1">defaultAuth</data>
  <data key="d3">securityContexts方法调用defaultAuth()以定义默认的安全引用</data>
  <data key="d4">89</data>
  <data key="d5">89</data>
  <data key="d6">SwaggerConfig.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\core\config\SwaggerConfig.java</data>
</node>
<node id="SwaggerConfig.java|SecurityReference">
  <data key="d0">100:         AuthorizationScope authorizationScope = new AuthorizationScope("global", "accessEverything");
101:         AuthorizationScope[] authorizationScopes = new AuthorizationScope[1];
102:         authorizationScopes[0] = authorizationScope;
103:         List&lt;SecurityReference&gt; securityReferences = new ArrayList&lt;&gt;();
104:         securityReferences.add(new SecurityReference("Authorization", authorizationScopes));</data>
  <data key="d1">AuthorizationScope</data>
  <data key="d2">SecurityReference</data>
  <data key="d3">defaultAuth方法使用AuthorizationScope来配置安全引用的授权范围</data>
  <data key="d4">100</data>
  <data key="d5">104</data>
  <data key="d6">SwaggerConfig.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\core\config\SwaggerConfig.java</data>
</node>
<node id="SwaggerConfig.java|AuthorizationScope">
  <data key="d0">100:         AuthorizationScope authorizationScope = new AuthorizationScope("global", "accessEverything");
101:         AuthorizationScope[] authorizationScopes = new AuthorizationScope[1];
102:         authorizationScopes[0] = authorizationScope;
103:         List&lt;SecurityReference&gt; securityReferences = new ArrayList&lt;&gt;();
104:         securityReferences.add(new SecurityReference("Authorization", authorizationScopes));</data>
  <data key="d2">SecurityReference</data>
  <data key="d1">AuthorizationScope</data>
  <data key="d3">defaultAuth方法使用AuthorizationScope来配置安全引用的授权范围</data>
  <data key="d4">100</data>
  <data key="d5">104</data>
  <data key="d6">SwaggerConfig.java</data>
  <data key="d7">C:\Users\34834\Desktop\黑客\AiCodeAudits\pythonProject\演示项目\RuoYi-Vue-master\ruoyi-admin\src\main\java\com\ruoyi\web\core\config\SwaggerConfig.java</data>
</node>
<edge source="pom.xml|ruoyi-admin" target="pom.xml|ruoyi"/>
<edge source="pom.xml|ruoyi-admin" target="pom.xml|spring-boot-devtools"/>
<edge source="pom.xml|ruoyi-admin" target="pom.xml|springfox-boot-starter"/>
<edge source="pom.xml|ruoyi-admin" target="pom.xml|swagger-models"/>
<edge source="pom.xml|ruoyi-admin" target="pom.xml|mysql-connector-java"/>
<edge source="pom.xml|ruoyi-admin" target="pom.xml|ruoyi-framework"/>
<edge source="pom.xml|ruoyi-admin" target="pom.xml|ruoyi-quartz"/>
<edge source="pom.xml|ruoyi-admin" target="pom.xml|ruoyi-generator"/>
<edge source="pom.xml|ruoyi-admin" target="pom.xml|spring-boot-maven-plugin"/>
<edge source="pom.xml|ruoyi-admin" target="pom.xml|maven-war-plugin"/>
<edge source="logback.xml|property" target="logback.xml|log.path"/>
<edge source="logback.xml|property" target="logback.xml|log.pattern"/>
<edge source="logback.xml|appender" target="logback.xml|console"/>
<edge source="logback.xml|appender" target="logback.xml|file_info"/>
<edge source="logback.xml|appender" target="logback.xml|file_error"/>
<edge source="logback.xml|appender" target="logback.xml|sys-user"/>
<edge source="logback.xml|logger" target="logback.xml|com.ruoyi"/>
<edge source="logback.xml|logger" target="logback.xml|org.springframework"/>
<edge source="logback.xml|logger" target="logback.xml|sys-user"/>
<edge source="logback.xml|root" target="logback.xml|console"/>
<edge source="logback.xml|root" target="logback.xml|file_info"/>
<edge source="mybatis-config.xml|configuration" target="mybatis-config.xml|settings"/>
<edge source="mybatis-config.xml|settings" target="mybatis-config.xml|setting"/>
<edge source="RuoYiApplication.java|RuoYiApplication" target="RuoYiApplication.java|SpringApplication"/>
<edge source="RuoYiApplication.java|RuoYiApplication" target="RuoYiApplication.java|System"/>
<edge source="RuoYiServletInitializer.java|RuoYiServletInitializer" target="RuoYiServletInitializer.java|SpringBootServletInitializer"/>
<edge source="RuoYiServletInitializer.java|configure" target="RuoYiServletInitializer.java|SpringApplicationBuilder"/>
<edge source="CaptchaController.java|CaptchaController" target="CaptchaController.java|ISysConfigService"/>
<edge source="CaptchaController.java|CaptchaController" target="CaptchaController.java|Producer"/>
<edge source="CaptchaController.java|CaptchaController" target="CaptchaController.java|RedisCache"/>
<edge source="CaptchaController.java|CaptchaController" target="CaptchaController.java|Base64"/>
<edge source="CommonController.java|CommonController" target="CommonController.java|FileUtils"/>
<edge source="CommonController.java|CommonController" target="CommonController.java|StringUtils"/>
<edge source="CommonController.java|CommonController" target="CommonController.java|RuoYiConfig"/>
<edge source="CommonController.java|CommonController" target="CommonController.java|FileUploadUtils"/>
<edge source="CommonController.java|CommonController" target="CommonController.java|serverConfig"/>
<edge source="CommonController.java|CommonController" target="CommonController.java|AjaxResult"/>
<edge source="CacheController.java|CacheController" target="CacheController.java|AjaxResult"/>
<edge source="CacheController.java|redisTemplate" target="CacheController.java|connection.info"/>
<edge source="CacheController.java|redisTemplate" target="CacheController.java|connection.dbSize"/>
<edge source="CacheController.java|redisTemplate" target="CacheController.java|keys"/>
<edge source="CacheController.java|redisTemplate" target="CacheController.java|opsForValue"/>
<edge source="CacheController.java|redisTemplate" target="CacheController.java|delete"/>
<edge source="CacheController.java|commandStats" target="CacheController.java|stringPropertyNames"/>
<edge source="CacheController.java|StringUtils" target="CacheController.java|removeStart"/>
<edge source="CacheController.java|StringUtils" target="CacheController.java|substringBetween"/>
<edge source="ServerController.java|ServerController" target="ServerController.java|AjaxResult"/>
<edge source="ServerController.java|ServerController" target="ServerController.java|Server"/>
<edge source="SysLogininforController.java|SysLogininforController" target="SysLogininforController.java|ISysLogininforService"/>
<edge source="SysLogininforController.java|SysLogininforController" target="SysLogininforController.java|ExcelUtil"/>
<edge source="SysLogininforController.java|SysLogininforController" target="SysLogininforController.java|SysPasswordService"/>
<edge source="SysOperlogController.java|SysOperlogController" target="SysOperlogController.java|operLogService"/>
<edge source="SysOperlogController.java|SysOperlogController" target="SysOperlogController.java|ExcelUtil"/>
<edge source="SysUserOnlineController.java|SysUserOnlineController" target="SysUserOnlineController.java|redisCache"/>
<edge source="SysUserOnlineController.java|SysUserOnlineController" target="SysUserOnlineController.java|userOnlineService"/>
<edge source="SysUserOnlineController.java|SysUserOnlineController" target="SysUserOnlineController.java|getDataTable"/>
<edge source="SysConfigController.java|SysConfigController" target="SysConfigController.java|configService"/>
<edge source="SysConfigController.java|SysConfigController" target="SysConfigController.java|ExcelUtil"/>
<edge source="SysDeptController.java|SysDeptController" target="SysDeptController.java|ISysDeptService"/>
<edge source="SysDictDataController.java|SysDictDataController" target="SysDictDataController.java|dictDataService"/>
<edge source="SysDictDataController.java|SysDictDataController" target="SysDictDataController.java|ExcelUtil"/>
<edge source="SysDictDataController.java|SysDictDataController" target="SysDictDataController.java|dictTypeService"/>
<edge source="SysDictTypeController.java|SysDictTypeController" target="SysDictTypeController.java|dictTypeService"/>
<edge source="SysDictTypeController.java|SysDictTypeController" target="SysDictTypeController.java|selectDictTypeList"/>
<edge source="SysDictTypeController.java|SysDictTypeController" target="SysDictTypeController.java|selectDictTypeById"/>
<edge source="SysDictTypeController.java|SysDictTypeController" target="SysDictTypeController.java|checkDictTypeUnique"/>
<edge source="SysDictTypeController.java|SysDictTypeController" target="SysDictTypeController.java|insertDictType"/>
<edge source="SysDictTypeController.java|SysDictTypeController" target="SysDictTypeController.java|updateDictType"/>
<edge source="SysDictTypeController.java|SysDictTypeController" target="SysDictTypeController.java|deleteDictTypeByIds"/>
<edge source="SysDictTypeController.java|SysDictTypeController" target="SysDictTypeController.java|resetDictCache"/>
<edge source="SysDictTypeController.java|SysDictTypeController" target="SysDictTypeController.java|selectDictTypeAll"/>
<edge source="SysIndexController.java|SysIndexController" target="SysIndexController.java|StringUtils"/>
<edge source="SysIndexController.java|SysIndexController" target="SysIndexController.java|RuoYiConfig"/>
<edge source="SysLoginController.java|SysLoginController" target="SysLoginController.java|SysLoginService"/>
<edge source="SysLoginController.java|SysLoginController" target="SysLoginController.java|SecurityUtils"/>
<edge source="SysLoginController.java|SysLoginController" target="SysLoginController.java|SysPermissionService"/>
<edge source="SysLoginController.java|SysLoginController" target="SysLoginController.java|TokenService"/>
<edge source="SysLoginController.java|SysLoginController" target="SysLoginController.java|ISysMenuService"/>
<edge source="SysMenuController.java|SysMenuController" target="SysMenuController.java|menuService"/>
<edge source="SysNoticeController.java|SysNoticeController" target="SysNoticeController.java|ISysNoticeService"/>
<edge source="SysPostController.java|SysPostController" target="SysPostController.java|postService"/>
<edge source="SysPostController.java|SysPostController" target="SysPostController.java|startPage"/>
<edge source="SysPostController.java|SysPostController" target="SysPostController.java|postService.selectPostList"/>
<edge source="SysPostController.java|SysPostController" target="SysPostController.java|getDataTable"/>
<edge source="SysPostController.java|SysPostController" target="SysPostController.java|new ExcelUtil"/>
<edge source="SysPostController.java|SysPostController" target="SysPostController.java|postService.selectPostById"/>
<edge source="SysPostController.java|SysPostController" target="SysPostController.java|success"/>
<edge source="SysPostController.java|SysPostController" target="SysPostController.java|postService.checkPostNameUnique"/>
<edge source="SysPostController.java|SysPostController" target="SysPostController.java|error"/>
<edge source="SysPostController.java|SysPostController" target="SysPostController.java|postService.checkPostCodeUnique"/>
<edge source="SysPostController.java|SysPostController" target="SysPostController.java|post.setCreateBy"/>
<edge source="SysPostController.java|SysPostController" target="SysPostController.java|postService.insertPost"/>
<edge source="SysPostController.java|SysPostController" target="SysPostController.java|Error"/>
<edge source="SysPostController.java|SysPostController" target="SysPostController.java|post.setUpdateBy"/>
<edge source="SysPostController.java|SysPostController" target="SysPostController.java|postService.updatePost"/>
<edge source="SysPostController.java|SysPostController" target="SysPostController.java|postService.deletePostByIds"/>
<edge source="SysPostController.java|SysPostController" target="SysPostController.java|toAjax"/>
<edge source="SysPostController.java|SysPostController" target="SysPostController.java|postService.selectPostAll"/>
<edge source="SysPostController.java|ExcelUtil" target="SysPostController.java|exportExcel"/>
<edge source="SysProfileController.java|SysProfileController" target="SysProfileController.java|AjaxResult"/>
<edge source="SysProfileController.java|SysProfileController" target="SysProfileController.java|ISysUserService"/>
<edge source="SysProfileController.java|SysProfileController" target="SysProfileController.java|TokenService"/>
<edge source="SysProfileController.java|SysProfileController" target="SysProfileController.java|LoginUser"/>
<edge source="SysProfileController.java|TokenService" target="SysProfileController.java|LoginUser"/>
<edge source="SysProfileController.java|LoginUser" target="SysProfileController.java|SysUser"/>
<edge source="SysProfileController.java|SysUser" target="SysProfileController.java|StringUtils"/>
<edge source="SysProfileController.java|SysUser" target="SysProfileController.java|ISysUserService"/>
<edge source="SysProfileController.java|SecurityUtils" target="SysProfileController.java|String"/>
<edge source="SysProfileController.java|FileUploadUtils" target="SysProfileController.java|String"/>
<edge source="SysRegisterController.java|SysRegisterController" target="SysRegisterController.java|configService"/>
<edge source="SysRegisterController.java|SysRegisterController" target="SysRegisterController.java|registerService"/>
<edge source="SysRegisterController.java|SysRegisterController" target="SysRegisterController.java|StringUtils"/>
<edge source="SysRoleController.java|SysRoleController" target="SysRoleController.java|roleService"/>
<edge source="SysRoleController.java|SysRoleController" target="SysRoleController.java|ExcelUtil"/>
<edge source="SysRoleController.java|SysRoleController" target="SysRoleController.java|userService"/>
<edge source="SysRoleController.java|SysRoleController" target="SysRoleController.java|permissionService"/>
<edge source="SysRoleController.java|SysRoleController" target="SysRoleController.java|tokenService"/>
<edge source="SysRoleController.java|SysRoleController" target="SysRoleController.java|deptService"/>
<edge source="SysUserController.java|SysUserController" target="SysUserController.java|userService"/>
<edge source="SysUserController.java|SysUserController" target="SysUserController.java|ExcelUtil"/>
<edge source="SysUserController.java|SysUserController" target="SysUserController.java|roleService"/>
<edge source="SysUserController.java|SysUserController" target="SysUserController.java|deptService"/>
<edge source="TestController.java|TestController" target="TestController.java|R.ok"/>
<edge source="TestController.java|TestController" target="TestController.java|R.fail"/>
<edge source="TestController.java|UserEntity" target="TestController.java|StringUtils.isNull"/>
<edge source="TestController.java|UserEntity" target="TestController.java|Integer getUserId"/>
<edge source="TestController.java|UserEntity" target="TestController.java|void setUserId"/>
<edge source="TestController.java|UserEntity" target="TestController.java|String getUsername"/>
<edge source="TestController.java|UserEntity" target="TestController.java|void setUsername"/>
<edge source="TestController.java|UserEntity" target="TestController.java|String getPassword"/>
<edge source="TestController.java|UserEntity" target="TestController.java|void setPassword"/>
<edge source="TestController.java|UserEntity" target="TestController.java|String getMobile"/>
<edge source="TestController.java|UserEntity" target="TestController.java|void setMobile"/>
<edge source="SwaggerConfig.java|SwaggerConfig" target="SwaggerConfig.java|RuoYiConfig"/>
<edge source="SwaggerConfig.java|SwaggerConfig" target="SwaggerConfig.java|Docket"/>
<edge source="SwaggerConfig.java|Docket" target="SwaggerConfig.java|ApiInfo"/>
<edge source="SwaggerConfig.java|Docket" target="SwaggerConfig.java|RequestHandlerSelectors"/>
<edge source="SwaggerConfig.java|Docket" target="SwaggerConfig.java|PathSelectors"/>
<edge source="SwaggerConfig.java|Docket" target="SwaggerConfig.java|securitySchemes"/>
<edge source="SwaggerConfig.java|Docket" target="SwaggerConfig.java|securityContexts"/>
<edge source="SwaggerConfig.java|ApiInfo" target="SwaggerConfig.java|ApiInfoBuilder"/>
<edge source="SwaggerConfig.java|SecurityContext" target="SwaggerConfig.java|defaultAuth"/>
<edge source="SwaggerConfig.java|SecurityReference" target="SwaggerConfig.java|AuthorizationScope"/>
</graph></graphml>